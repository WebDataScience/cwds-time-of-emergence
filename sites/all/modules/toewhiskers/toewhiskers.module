<?php

function toewhiskers_menu() {
  $items['explore'] = array(
    'page callback' => 'toewhiskers_explore_page_function',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  $items['timeline'] = array(
    'page callback' => 'toewhiskers_page_function',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  $items['timelinedata'] = array(
    'page callback' => 'toewhiskers_json_query_function',
    'page arguments' => array(1, 'sid'),
    'access callback' => TRUE,
  );
  $items['cigtoeconfig'] = array(
    'page callback' => 'toewhiskers_cigtoeconfig_function',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  $items['renderwebformelement'] = array(
    'page callback' => 'drupal_get_form',
    'page arguments' => array('form_test_form'),
    'access callback' => TRUE,
  );
  $items['test'] = array(
    'page callback' => 'toewhiskers_renderwebformelement_function',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  return $items;
}


function toewhiskers_explore_page_function(){   
  return theme('explore_template');  
}


function toewhiskers_page_function(){

    drupal_add_js('https://www.google.com/jsapi');
    drupal_add_js("https://www.google.com/jsapi?autoload={'modules':[{'name':'visualization','version':'1','packages':['timeline']}]}");
    drupal_add_js(drupal_get_path('module', 'toewhiskers') . '/js/chart.js');
    
    drupal_add_css(drupal_get_path('module', 'toewhiskers') . '/css/toewhiskers.css');
    
    return theme('timeline_template');
}

  
  





function toewhiskers_theme(){
    return array(
      'explore_template' => array(
         // file name will be page-explore.tpl.php
         'template' => 'page-explore',
        ),
        'timeline_template' => array(
            // file name will be page-timeline.tpl.php
            'template' => 'page-timeline',
            /*'variables' => array(
               'title' => null,
               'body' => null,
               'link' => null,
               //'parameterform' => null,
            ),*/
        ),
    );
}


function template_preprocess_explore_template(&$variables) {
  //drupal_build_form($form_id, &$form_state)
  $form = drupal_get_form('form_explore_form');
  $o = drupal_render($form);
  $variables['explore_form'] = $o;
}

function template_preprocess_timeline_template(&$variables) {
  $variables['parameterform'] = toewhiskers_renderwebformelement_function();
}



function toewhiskers_json_query_function($sid){

  $verbose_test_mode = FALSE;
  
  $max_TOE_year = 2100;

  // The nid of the webform.
  $webformnid = '4';

  module_load_include('inc', 'webform', 'includes/webform.submissions');
 
  $webform = webform_get_submission($webformnid, $sid);
  $dataarray = $webform->data;
  
  $region = trim($dataarray[7]['value'][0]);
  
  $compare = trim($dataarray[8]['value'][0]);
  // Multiple variables allowed.
  $variables = implode("','",$dataarray[1]['value']);
  $variables = str_replace(" ", "", $variables);
  $emission = trim($dataarray[2]['value'][0]);
  $dataset = trim($dataarray[6]['value'][0]);
  $tolerance = trim($dataarray[5]['value'][0]);
  $confidence = trim($dataarray[3]['value'][0]);

  
  /* Depricated. Based on original version of database.
  $query = "SELECT {SCEN1_DATA}.TOE,{SCEN1_DATA}.VARIABLEID,{SCEN1_DATA}.CHANGEDIR,{TOE_DATA}.VARIABLEDEF FROM {SCEN1_DATA} LEFT JOIN {TOE_DATA} on (TOE_DATA.VARIABLEID = SCEN1_DATA.VARIABLEID) WHERE 
  SCEN1_DATA.VARIABLEID in ('" . $variables . "') 
  AND SCEN1_DATA.REGION = '" . $region .   "' 
  AND SCEN1_DATA.EMISSCENARIO = '" . $emission .   "' 
  AND SCEN1_DATA.DATASET = '" . $dataset . "' 
  AND SCEN1_DATA.EMERGTHRES = " . $tolerance . "
  AND SCEN1_DATA.SIGNALCONFIDENCE = " . $confidence . "
  AND SCEN1_DATA.TOE <= " . $max_TOE_year . "
  LIMIT 20";
  */
 
  
  //Query for the timeline chart portion of /timeline page.
  $query = "SELECT {SCEN1_DATA_V1}.TOE,{SCEN1_DATA_V1}.VARIABLEID,{SCEN1_DATA_V1}.CHANGEDIR,{TOE_DATA_V1}.VARIABLENAME,{TOE_DATA_V1}.VARIABLESHORTNAME FROM {SCEN1_DATA_V1} LEFT JOIN {TOE_DATA_V1} on (TOE_DATA_V1.VARIABLEID = SCEN1_DATA_V1.VARIABLEID) WHERE 
  SCEN1_DATA_V1.VARIABLEID in ('" . $variables . "') 
  AND SCEN1_DATA_V1.REGION = '" . $region .   "' 
  AND SCEN1_DATA_V1.EMISSCENARIO = '" . $emission .   "' 
  AND SCEN1_DATA_V1.DATASET = '" . $dataset . "' 
  AND SCEN1_DATA_V1.EMERGTHRES = " . $tolerance . "
  AND SCEN1_DATA_V1.SIGNALCONFIDENCE = " . $confidence . "
  AND SCEN1_DATA_V1.TOE <= " . $max_TOE_year . "
  AND SCEN1_DATA_V1.MODELAGREEMENT = 'XX' 
  AND SCEN1_DATA_V1.GCM = 'GCM_ensemble' 
  LIMIT 20";
  
  
  if($verbose_test_mode){print($query);}
  
  
  
  $output = "";
  $toe = array();
  
  db_set_active('cig_toe');
  
  $result = db_query($query);
  // Result is returned as a iterable object that returns a stdClass object on each iteration
  foreach ($result as $record) {
    // Perform operations on $record->title, etc. here. In this example the available data would be mapped to object properties:
    // $record->nid, $record->title, $record->created
    //$output .= "variableid: " . $record->VARIABLEID . " toe: " . $record->TOE;
    $toe[$record->VARIABLEID] = array($record->CHANGEDIR,intval($record->TOE),$record->VARIABLENAME,$record->VARIABLEID,ceil($record->TOE/5)*5,$record->VARIABLESHORTNAME);
  }

  
  // Query for 'table' portion of /timeline page.
  $query = "SELECT SCEN1_DATA_V1.*,TOE_DATA_V1.VARIABLESHORTNAME FROM {SCEN1_DATA_V1}  LEFT JOIN {TOE_DATA_V1} on (TOE_DATA_V1.VARIABLEID = SCEN1_DATA_V1.VARIABLEID) WHERE
  SCEN1_DATA_V1.VARIABLEID in ('" . $variables . "') 
  AND SCEN1_DATA_V1.REGION = '" . $region .   "' 
  AND SCEN1_DATA_V1.EMISSCENARIO = '" . $emission .   "' 
  AND SCEN1_DATA_V1.DATASET = '" . $dataset . "' 
  AND SCEN1_DATA_V1.EMERGTHRES = " . $tolerance . "
  AND SCEN1_DATA_V1.SIGNALCONFIDENCE = " . $confidence . "
  AND (SCEN1_DATA_V1.MODELAGREEMENT = '25' OR SCEN1_DATA_V1.MODELAGREEMENT = '75') 
  AND SCEN1_DATA_V1.GCM = 'GCM_ensemble' ORDER BY SCEN1_DATA_V1.VARIABLEID ";
  //print($query . "<br/>");
  
  $result = db_query($query);
  
  $tabledataarray = array();
  
  // Result is returned as a iterable object that returns a stdClass object on each iteration
  foreach ($result as $record) {
    //print_r($record);
    if($record->MODELAGREEMENT == '25'){$tabledataarray[$record->VARIABLEID]['toe25']=ceil($record->TOE/5)*5;}
    if($record->MODELAGREEMENT == '75'){$tabledataarray[$record->VARIABLEID]['toe75']=ceil($record->TOE/5)*5;}
    $tabledataarray[$record->VARIABLEID]['changedir']=$record->CHANGEDIR;
    $tabledataarray[$record->VARIABLEID]['shortname']=$record->VARIABLESHORTNAME;
  }
  
  //print_r($tabledataarray);
  
  db_set_active();
  
  
  $toedata = array(
    "toedata" => $toe,
    "tabledata" => $tabledataarray,
    "query" => $query,
    "maxtoeyear" => $max_TOE_year,
    "sid" => $sid,
    "scenario" => $emission,
    "confidence" => $confidence,
    "tolerance" => $tolerance,
    "dataset" => $dataset,
    //"webform" => $webform,
    //"output" => $output,
  );  
  drupal_json_output($toedata);
  
}



function toewhiskers_cigtoeconfig_function(){
  
  $o = "";
  db_set_active('cig_toe');
  
  $columns = array('REGION','EMISSCENARIO','DATASET','EMERGTHRES','SIGNALCONFIDENCE','MODELAGREEMENT','GCM');
  foreach ($columns as $column) {
    $o .= "<br/>" . $column . "<br/>";
    $query = "SELECT DISTINCT " . $column . " FROM {SCEN1_DATA_V1}";
    
    $result = db_query($query);
    // Result is returned as a iterable object that returns a stdClass object on each iteration
    foreach ($result as $record) {
      $o .= "'" . $record->$column . "' => '" . $record->$column . "',<br/>";
    }
  }
  
  $queries = array('SELECT DISTINCT SCEN1_DATA_V1.VARIABLEID AS k, TOE_DATA_V1.VARIABLENAME AS v FROM SCEN1_DATA_V1 LEFT JOIN TOE_DATA_V1 ON (TOE_DATA_V1.VARIABLEID = SCEN1_DATA_V1.VARIABLEID)');
  
  foreach ($queries as $query) {
    print($query);
    $o .= "<br/>" . $query . "<br/>";   
    $result = db_query($query);
    // Result is returned as a iterable object that returns a stdClass object on each iteration
    foreach ($result as $record) {
      $o .= $record->k . "|" . $record->v . "<br/>";
    }
  }
  db_set_active();
  print($o);
}
  
  
function toewhiskers_renderwebformelement_function(){

  //drupal_build_form($form_id, &$form_state)
  
  $form = drupal_get_form('form_compare_form');
  
  $o = drupal_render($form);
  
  return $o;
  
}


function form_explore_form($form,&$form_submit) {
  $form['region'] = array(
    '#type' => 'select',
    '#title' => t('Region'),
    '#options' => array(
      '2.1.17' => 'King County',
    ),
    '#multiple' => FALSE,
    '#required' => TRUE,
  );
  $form['compare'] = array(
    '#type' => 'radios',
    '#title' => t('Compare or Explore'),
    '#options' => array(
      'compare' => 'Compare multiple hydroclimatic variables in a single geographic domain',
      'explore' => 'Explore the spatial variability of one hydro-climatic variable across a specific geographic domain',
    ),
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#title' => t('Submit'),
    '#value' => 'Submit',
    '#type' => 'submit',
    );
  return $form;
}





function form_compare_form($form,&$form_submit) {
  /* 
  // 'variable' might get it's own function? How to separate form elements across different pages is still under review.
  $form['variable'] = array(
    '#type' => 'select',
    '#title' => t('Variable'),
    '#options' => array(
      'V1.01' => t('Average temperature in January'),
      'V1.02' => t('Average temperature in February'),
      'V1.03' => t('Average temperature in March'),
      'V1.04' => t('Average temperature in April'),
      'V1.05' => t('Average temperature in May'),
      'V1.06' => t('Average temperature in June'),
      'V1.07' => t('Average temperature in July'),
      'V1.08' => t('Average temperature in August'),
      'V1.09' => t('Average temperature in September'),
      'V1.10' => t('Average temperature in October'),
      'V1.11' => t('Average temperature in November'),
      'V1.12' => t('Average temperature in December'),
      'V8' => t('Number of days per year with daily maximum temperature exceeding 90 degF (32.2 degC)'),
    ),
    //'#default_value' => $category['selected'],
    '#description' => t('Select one or many hydroclimatic variable(s).'),
    '#multiple' => TRUE,
    '#required' => TRUE,
  );
  */
  $form['emission'] = array(
    '#type' => 'radios',
    '#title' => t('Emission scenario'),
    '#options' => array(
      'rcp45' => 'rcp45',
      'rcp85' => 'rcp85',
    ),
    '#required' => TRUE,
  );
  $form['dataset'] = array(
    '#type' => 'radios',
    '#title' => t('Dataset'),
    '#options' => array(
      'BCSD5' => 'BCSD5',
    ),
    '#required' => TRUE,
  );
  $form['tolerance'] = array(
    '#type' => 'radios',
    '#title' => t('Tolerance (Emergence threshold)'),
    '#options' => array(
      '80' => '80',
      '95' => '95',
    ),
    '#required' => TRUE,
  );
  $form['confidence'] = array(
    '#type' => 'radios',
    '#title' => t('Confidence'),
    '#options' => array(
      '5' => '5',
      '50' => '50',
      '95' => '95',
    ),
    '#required' => TRUE,
  );
  $form['submit'] = array(
    '#title' => t('Submit'),
    '#value' => 'Submit',
    '#type' => 'submit',
    );
  return $form;
}


function mytheme_preprocess(&$variables, $hook) {

 
  // Track run count for each hook to provide zebra striping.
  // See "template_preprocess_block()" which provides the same feature specific to blocks.
  $count[$hook] = isset($count[$hook]) && is_int($count[$hook]) ? $count[$hook] : 1;
  $variables['zebra_hook'][$hook] = ($count[$hook] % 2) ? 'odd' : 'even';
  $variables['id_hook'][$hook] = $count[$hook]++;
}