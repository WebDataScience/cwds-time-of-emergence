<?php

// Error reporting code
error_reporting(E_ALL);
ini_set('display_errors', TRUE);
ini_set('display_startup_errors', TRUE);


function toewhiskers_menu() {
  $items['explore'] = array(
    'page callback' => 'toewhiskers_explore_page_function',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  $items['compare'] = array(
    //'page callback' => 'toewhiskers_renderwebformelement_function',
    'page callback' => 'toewhiskers_compare_page_function',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  $items['timeline'] = array(
    'page callback' => 'toewhiskers_page_function',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  $items['timelinedata'] = array(
    'page callback' => 'toewhiskers_json_query_function',
    'page arguments' => array(1, 'mode'),
    'access callback' => TRUE,
  );
  $items['boxplotdata'] = array(
    'page callback' => 'toewhiskers_json_query_boxplot_function',
    'page arguments' => array(1, 'variable'),
    'access callback' => TRUE,
  );
  $items['cigtoeconfig'] = array(
    'page callback' => 'toewhiskers_cigtoeconfig_function',
    'page arguments' => array(),
    'access callback' => TRUE,
  );

  return $items;
}


function toewhiskers_theme(){
    return array(
      'explore_template' => array(
         // file name will be page-explore.tpl.php
         'template' => 'page-explore',
      ),
      'compare_template' => array(
        'template' => 'page-toewhiskers',
      ),
      'timeline_template' => array(
            // file name will be page-timeline.tpl.php
            'template' => 'page-timeline',
            /*'variables' => array(
               'title' => null,
               'body' => null,
               'link' => null,
               //'parameterform' => null,
            ),*/
        ),
    );
}



function toewhiskers_explore_page_function(){  
  drupal_add_js(drupal_get_path('module', 'toewhiskers') . '/js/map.js');
  drupal_set_title('Explore');  
  return theme('explore_template');  
}

function toewhiskers_compare_page_function(){ 
  drupal_set_title('Compare'); 
  return theme('compare_template');  
}

function template_preprocess_explore_template(&$variables) {
  //drupal_build_form($form_id, &$form_state)
  $form = drupal_get_form('toewhiskers_explore_form');
  $o = drupal_render($form);
  $variables['explore_form'] = $o;
}

function template_preprocess_compare_template(&$variables) {
  //drupal_build_form($form_id, &$form_state)
  $form = drupal_get_form('toewhiskers_compare_form');
  $o = drupal_render($form);
  $variables['explore_form'] = $o;
}

function toewhiskers_explore_form($form, &$form_submit) {

  // Session variable used to prepopulate if available.
  $previousvaluesearray = isset($_SESSION['compare'])?$_SESSION['compare']:array();
  
  $options = array(
    0 => 'Compare multiple hydroclimatic variables in a single geographic domain',
    1 => 'Explore the spatial variability of one hydro-climatic variable across a specific geographic domain',
    2 => 'View the priority areas for climate change response action', 
  );
  $form['compare'] = array(
    '#type' => 'radios',
    '#title' => t('I want to...'),
    '#options' => $options,
    '#required' => TRUE,
    //'#default_value' => isset($previousvaluesearray['compare'])?$previousvaluesearray['compare']:key($options),
  );
  $options = array(0 => 'Pacific NW',1 => 'State',2 => 'County',3 => 'Tribal land',4 => 'Watershed',5 => 'Puget Sound',6 => 'Stream');
  $form['geodomain'] = array(
    '#type' => 'radios',
    '#title' => t('Geographic Domain'),
    '#options' => $options,
    '#default_value' => '2',
    '#disabled' => TRUE,
  );
  $options = array('2.1.17' => 'King County',);
  $form['region'] = array(
    '#type' => 'select',
    '#title' => t('Region'),
    '#options' => $options,
    '#multiple' => FALSE,
    '#required' => TRUE,
    //'#default_value' => isset($previousvaluesearray['region'])?$previousvaluesearray['region']:key($options),
    '#default_value' => '2.1.17',
  );
  $form['submit'] = array(
    '#title' => t('Next Step'),
    '#value' => 'Next Step',
    '#type' => 'submit',
    //'#disabled' => TRUE,
  );
    
  $form_submit['redirect'] = 'compare';
    
  return $form;
}


/**
 * Submit handler for the '/explore' form.
 */
function toewhiskers_explore_form_submit($form, &$form_state) {
  $form_state['redirect'] = 'compare';

  // Grab session values if present.
  $comparearray = isset($_SESSION['compare'])?$_SESSION['compare']:array();
 
  $comparearray['geodomain'] = check_plain($form_state['values']['geodomain']); 
  $comparearray['region'] = check_plain($form_state['values']['region']);
  $comparearray['compare'] = check_plain($form_state['values']['compare']);

  $_SESSION['compare'] = $comparearray;
}


function toewhiskers_page_function(){
    drupal_add_js('https://www.google.com/jsapi');
    drupal_add_js("https://www.google.com/jsapi?autoload={'modules':[{'name':'visualization','version':'1','packages':['timeline']}]}");
    drupal_add_js(drupal_get_path('module', 'toewhiskers') . '/js/chart.js');
    drupal_add_css(drupal_get_path('module', 'toewhiskers') . '/css/toewhiskers.css');
    // Set the value of the 'I want' to be 'compare' so that subsequent form submissions redirect to this page.
    $_SESSION['compare']['compare'] = 0;
    return theme('timeline_template');
}


function template_preprocess_timeline_template(&$variables) {
  $variables['parameterform'] = toewhiskers_renderwebformelement_function();
}



  
  
  
function toewhiskers_renderwebformelement_function(){  
  //This works to build initial forms that have no selections made yet.
  $form = drupal_get_form('toewhiskers_compare_form');
  $o = drupal_render($form);
  return $o;
}


function toewhiskers_compare_form($form,&$form_submit) {

  // Session variable used to prepopulate if available.
  $comparearray = isset($_SESSION['compare'])?$_SESSION['compare']:array();
  
  $form['narrow'] = array(
    '#type' => 'fieldset',
    '#title' => t('Narrow list of available Hydroclimatic Variables by following:'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  
  $options = array(4 => 'All',0 => 'Temperature', 1 => 'Precipitation', 2 => 'Hydrological', 3 => 'Stream', );
  $form['narrow']['theme'] = array(
    '#type' => 'radios',
    '#title' => t('Theme'),
    '#options' => $options,
    '#disabled' => TRUE,
    '#default_value' => '4',
  );
  $options = array(9 => 'All',0 => 'Drought', 1 => 'Energy', 2 => 'Fish', 3 => 'Flood',4 => 'General', 5 => 'Human health', 6 => 'Infrastructure', 7 => 'Streamflow',8 => 'Water quality',);
  $form['narrow']['impact'] = array(
    '#type' => 'radios',
    '#title' => t('Impact'),
    '#options' => $options,
    '#disabled' => TRUE,
    '#default_value' => '9',
  ); 
  $options = array(2 => 'All',0 => 'Average', 1 => 'Extreme',);
  $form['narrow']['descriptor'] = array(
    '#type' => 'radios',
    '#title' => t('Descriptor'),
    '#options' => $options,
    '#disabled' => TRUE,
    '#default_value' => '2',
    '#suffix' => '<div class="clearfix"></div>',
  );  
  $form['variable'] = array(
    '#type' => 'select',
    '#title' => t('Hydroclimatic Variables'),
    '#options' => array(
      'V1.01' => t('Average temperature in January'),
      'V1.02' => t('Average temperature in February'),
      'V1.03' => t('Average temperature in March'),
      'V1.04' => t('Average temperature in April'),
      'V1.05' => t('Average temperature in May'),
      'V1.06' => t('Average temperature in June'),
      'V1.07' => t('Average temperature in July'),
      'V1.08' => t('Average temperature in August'),
      'V1.09' => t('Average temperature in September'),
      'V1.10' => t('Average temperature in October'),
      'V1.11' => t('Average temperature in November'),
      'V1.12' => t('Average temperature in December'),
      'V8' => t('Number of days per year with daily maximum temperature exceeding 90 degF (32.2 degC)'),
    ),
    //'#default_value' => $category['selected'],
    '#description' => t('Select one or many hydroclimatic variable(s). Holding down &#39;ctrl&#39; key enables multiple select option.'),
    '#multiple' => TRUE,
    '#required' => TRUE,
    '#default_value' => isset($comparearray['variable'])?$comparearray['variable']:'',
    '#cols' => 120,
    '#size' => 10,
  );
  $form['parameter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Apply the following parameters to the query:'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $options = array(
    //'rcp45' => 'RCP Low (RCP4.5)',
    //'rcp85' => 'RCP High (RCP8.5)',
    'rcp45' => 'RCP4.5',
    'rcp85' => 'RCP8.5',
  );
  $form['parameter']['emission'] = array(
    '#type' => 'radios',
    '#title' => t('Emission scenario'),
    '#options' => $options,
    '#required' => TRUE,
    '#default_value' => isset($comparearray['emission'])?$comparearray['emission']:key($options),
  );
  /*
  $options = array(
    'rcp45' => 'RCP4.5',
    'rcp85' => 'RCP8.5',
  );
  $form['parameter']['emission'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Emission scenario'),
    '#options' => $options,
    '#required' => TRUE,
    '#default_value' => isset($comparearray['emission'])?$comparearray['emission']:'',
  );
  */
  $options = array(
    'BCSD5' => 'Statistically-downscaled (CMIP5 BCSD)',
  );
  $form['parameter']['dataset'] = array(
    '#type' => 'radios',
    '#title' => t('Dataset'),
    '#options' => $options,
    '#required' => TRUE,
    '#default_value' => isset($comparearray['dataset'])?$comparearray['dataset']:key($options),
  );
  $options = array(
    '95' => 'Low (middle 90% of historical fluctuations)',
    '80' => 'High (middle 60% of historical fluctuations)',
  );
  $form['parameter']['tolerance'] = array(
    '#type' => 'radios',
    '#title' => t('Tolerance (Emergence threshold)'),
    '#options' => $options,
    '#required' => TRUE,
    '#default_value' => isset($comparearray['tolerance'])?$comparearray['tolerance']:key($options),
  );
  $options = array(
    '95' => 'Lower bound (earlier ToE)',
    '50' => 'Central tendency',
    '5' => 'Upper bound (later ToE)',
  );
  $form['parameter']['confidence'] = array(
    '#type' => 'radios',
    '#title' => t('Confidence'),
    '#options' => $options,
    '#required' => TRUE,
    '#default_value' => isset($comparearray['confidence'])?$comparearray['confidence']:key($options),
  );
  $form['submit'] = array(
    '#title' => t('Calculate'),
    '#value' => 'Query for Time of Emergence',
    '#type' => 'submit',
    );
  return $form;
}


/**
 * Submit handler for the 'compare' form.
 */
function toewhiskers_compare_form_submit($form, &$form_state) {
  //drupal_set_message('formstate:<pre>'. print_r($form_state, TRUE) .'</pre>');
  // Grab session values if present.
  $comparearray = isset($_SESSION['compare'])?$_SESSION['compare']:array();
  $comparearray['theme'] = check_plain($form_state['values']['theme']);
  $comparearray['impact'] = check_plain($form_state['values']['impact']);
  $comparearray['descriptor'] = check_plain($form_state['values']['descriptor']);
  $comparearray['variable'] = toewhiskers_clean_array($form_state['values']['variable']);
  $comparearray['emission'] = check_plain($form_state['values']['emission']);
  //$comparearray['emission'] = toewhiskers_clean_array($form_state['values']['emission']);
  $comparearray['dataset'] = check_plain($form_state['values']['dataset']);
  $comparearray['tolerance'] = check_plain($form_state['values']['tolerance']);
  $comparearray['confidence'] = check_plain($form_state['values']['confidence']);
  // Set session variable.
  $_SESSION['compare'] = $comparearray;
  $compare = $_SESSION['compare'];

// If initial compare option was 'View the priority areas for climate change response action' send user to /density-maps instead of /timeline
if ($compare['compare'] == 2) {
  $form_state['redirect'] = 'density-maps';
} else {
  $form_state['redirect'] = 'timeline';
}

}


function toewhiskers_clean_array($array, $filter = 'check_plain') {
  $clean = array();
  foreach ($array as $key => $val) {
    if (is_array($val)) {
      $clean[$filter($key)] = clean_array($val, $filter);
    }
    else {
      $clean[$filter($key)] = $filter($val);
    }
  }
  return $clean;
}



/*
 * Ajax/JSON data retriever.
 */
function toewhiskers_json_query_function($mode){

  //drupal_set_message('formstate:<pre>'. print_r($_SESSION['compare'], TRUE) .'</pre>');
  
  $max_TOE_year = 2100;

  $verbose_test_mode = FALSE;
  
  $compare = $_SESSION['compare'];
  
  $region = trim($compare['region']);
  
  // Multiple variables allowed.
  $variables = implode("','",$compare['variable']);
  $variables = str_replace(" ", "", $variables);
  
  // Radios
  $emission = trim($compare['emission']);
  
  // Checkboxes
  //$emissions = implode("','",$compare['emission']);
  //$emissions = str_replace(" ", "", $emissions);
  
  $dataset = trim($compare['dataset']);
  $tolerance = trim($compare['tolerance']);
  $confidence = trim($compare['confidence']);
 
  // radios:        AND SCEN1_DATA_V1.EMISSCENARIO = '" . $emission .   "' 
  // checkboxes:    AND SCEN1_DATA_V1.EMISSCENARIO in ('" . $emissions . "') 
  
  //Query for the timeline chart portion of /timeline page.
  $query = "SELECT 
  {SCEN1_DATA_V1}.TOE,{SCEN1_DATA_V1}.VARIABLEID,{SCEN1_DATA_V1}.CHANGEDIR,{TOE_DATA_V1}.VARIABLENAME,{TOE_DATA_V1}.VARIABLESHORTNAME,{SCEN1_DATA_V1}.EMISSCENARIO 
  FROM {SCEN1_DATA_V1} LEFT JOIN {TOE_DATA_V1} on (TOE_DATA_V1.VARIABLEID = SCEN1_DATA_V1.VARIABLEID) WHERE 
  SCEN1_DATA_V1.VARIABLEID in ('" . $variables . "') 
  AND SCEN1_DATA_V1.REGION = '" . $region .   "' 
  AND SCEN1_DATA_V1.EMISSCENARIO = '" . $emission .   "' 
  AND SCEN1_DATA_V1.DATASET = '" . $dataset . "' 
  AND SCEN1_DATA_V1.EMERGTHRES = " . $tolerance . "
  AND SCEN1_DATA_V1.SIGNALCONFIDENCE = " . $confidence . "
  AND SCEN1_DATA_V1.TOE <= " . $max_TOE_year . "
  AND SCEN1_DATA_V1.MODELAGREEMENT = 'XX' 
  AND SCEN1_DATA_V1.GCM = 'GCM_ensemble' 
  LIMIT 20";
  
  if($verbose_test_mode){print($query . "<br/><br/>");}
  
  $csvvariables = array('VARIABLEID','VARIABLESHORTNAME','TOE','CHANGEDIR','MODELAGREEMENT');
  $csv = implode(",", $csvvariables) . "\n";
  $toe = array();
  
  
  // Setup to query non Drupal database.
  db_set_active('cig_toe');
  
  $result = db_query($query);
  // Result is returned as a iterable object that returns a stdClass object on each iteration
  foreach ($result as $record) {
    
    // Function to translate ugly short name value in DB to pretty names:
    if($record->VARIABLESHORTNAME == "#Tmax>90degF(32.2deg"){$record->VARIABLESHORTNAME = "#Tmax>90°F(32.2°C)";}
    
    $toe[] = array(
      $record->CHANGEDIR,
      intval($record->TOE),
      $record->VARIABLENAME,
      $record->VARIABLEID,
      ceil($record->TOE/5)*5,
      $record->VARIABLESHORTNAME,
      $record->EMISSCENARIO,
    );
    
  }

  // Query for 'table' portion of /timeline page.
  $query = "SELECT SCEN1_DATA_V1.*,TOE_DATA_V1.VARIABLESHORTNAME FROM {SCEN1_DATA_V1}  LEFT JOIN {TOE_DATA_V1} on (TOE_DATA_V1.VARIABLEID = SCEN1_DATA_V1.VARIABLEID) WHERE
  SCEN1_DATA_V1.VARIABLEID in ('" . $variables . "') 
  AND SCEN1_DATA_V1.REGION = '" . $region .   "' 
  AND SCEN1_DATA_V1.EMISSCENARIO = '" . $emission .   "' 
  AND SCEN1_DATA_V1.DATASET = '" . $dataset . "' 
  AND SCEN1_DATA_V1.EMERGTHRES = " . $tolerance . "
  AND SCEN1_DATA_V1.SIGNALCONFIDENCE = " . $confidence . "
  AND (SCEN1_DATA_V1.MODELAGREEMENT = '25' OR SCEN1_DATA_V1.MODELAGREEMENT = '75' OR SCEN1_DATA_V1.MODELAGREEMENT = 'XX') 
  AND SCEN1_DATA_V1.GCM = 'GCM_ensemble' ORDER BY SCEN1_DATA_V1.VARIABLEID ";
  $result = db_query($query);
  
  $tabledataarray = array();
  
  // Result is returned as a iterable object that returns a stdClass object on each iteration
  foreach ($result as $record) {
    //print_r($record);
    if($record->MODELAGREEMENT == '25'){
      $roundedtoe = ceil($record->TOE/5)*5;
      $roundedtoe = ($roundedtoe > $max_TOE_year)?'beyond 2100':$roundedtoe;
      $tabledataarray[$record->VARIABLEID]['toe25']=$roundedtoe;
    }
    if($record->MODELAGREEMENT == '75'){
      $roundedtoe = ceil($record->TOE/5)*5;
      $roundedtoe = ($roundedtoe > $max_TOE_year)?'beyond 2100':$roundedtoe;
      $tabledataarray[$record->VARIABLEID]['toe75']=$roundedtoe;
    }
    if($record->MODELAGREEMENT == '25' || $record->MODELAGREEMENT == '75'){
      $tabledataarray[$record->VARIABLEID]['changedir']=$record->CHANGEDIR;
      $tabledataarray[$record->VARIABLEID]['shortname']=$record->VARIABLESHORTNAME;
      // Pretty function to replace this code soon.
      if($record->VARIABLESHORTNAME == "#Tmax>90degF(32.2deg"){$tabledataarray[$record->VARIABLEID]['shortname'] = "#Tmax>90°F(32.2°C)";}
    }
    foreach ($csvvariables as $key=>$value) {
      if($value == 'TOE' && ($record->TOE > 2100)){
        $csv .= "'Beyond 2100',";
      } else {
        $csv  .= $record->$value . ",";
      }
    }
    $csv = rtrim($csv, ",") . "\n";
  }
  
  db_set_active();
  
  
  $toedata = array(
    //"query" => $query,
    "maxtoeyear" => $max_TOE_year,
    "emission" => $emission,
    "confidence" => $confidence,
    "tolerance" => $tolerance,
    "dataset" => $dataset,
    "toedata" => $toe,
    "tabledata" => $tabledataarray,
  );  
  
  
  if($mode == 'text'){
    // Create text for data export.
    $prettynames['emission'] = array(
      'rcp45'	=>	'RCP4.5',
      'rcp85'	=>	'RCP8.5',
      'A1B'	=>	'SRES A1B',
      'B1'	=>	'SRES B1',
    );
    $prettynames['confidence'] = array(
      '5'	=>	'Low (5% confidence interval)',
      '50'	=>	'Medium (50% confidence interval)',
      '95'	=>	'High (95% confidence interval)',
    );
    $prettynames['tolerance'] = array(
      '95'	=>	'Low (middle 90% of historical fluctuations)',
      '80'	=>	'High (middle 60% of historical fluctuations)',
    );
    $prettynames['dataset'] = array(
      'BCSD5'	=>	'Statistically-downscaled (CMIP5 BCSD)',
    );
    
    $o = "Region: King County
Emission Scenario: " . $prettynames['emission'][$emission] . "
Confidence: " . $prettynames['confidence'][$confidence] . "
Tolerance: " . $prettynames['tolerance'][$tolerance] . "
Dataset: " . $prettynames['dataset'][$dataset] . "\n\n";
    $o .= $csv;
    
    //drupal_json_output(print($o));
    drupal_add_http_header('Content-Type', 'text/csv; utf-8');
    drupal_add_http_header('Content-Disposition', 'attachment; filename = dataexport.csv');
    print($o);
    
  } else {
    // Output JSON data for /timeline AJAX query.
    drupal_json_output($toedata);  
  }
  
}



/*
 * Ajax/JSON data retriever.
 * This function returns data for the boxplot page.
 */
function toewhiskers_json_query_boxplot_function($variable){
  $verbose_test_mode = FALSE;
  //Todo: validate $variable value.
  
  $maindatatable = "SCEN1_DATA_V2";
  
  $jasondata = array();
  $jasondata['variable'] = $variable;
  $csvdata = "Q1,Q2,Q3\n";
  $emergencethreshold_array = array('95','80');
  $emissionscenario_array = array('rcp85','rcp45');
  $signalconfidence_array = array('95','50','5');
  
  // Setup to query non Drupal database.
  db_set_active('cig_toe');
  
  // Query for variable name.
  $query = "SELECT variablename FROM TOE_DATA_V1 where variableid='" . $variable . "' LIMIT 1";
  $row = (object)db_query($query)->fetchAssoc();
  $jasondata['variablename'] = $row->variablename;
  
  // Query for TOE values.
  foreach ($emergencethreshold_array as $key=>$emergencethreshold){
    foreach ($emissionscenario_array as $key=>$emissionscenario){
      foreach ($signalconfidence_array as $key=>$signalconfidence){
  
        $dots = array();
        $box = array();
        
        $query="select * from " . $maindatatable . " WHERE variableid='" . $variable . "' and  emisscenario='" . $emissionscenario . "' and modelagreement='XX' and emergthres=" . $emergencethreshold . " and signalconfidence=" . $signalconfidence;
        // ?? Which dataset??  'BCSD5' => 'BCSD5', 
        
        $result = db_query($query);
        // Result is returned as a iterable object that returns a stdClass object on each iteration
        foreach ($result as $record) {
          $pos = strpos($record->GCM, 'ensemble');
          if ($pos === false) {
            if($record->TOE <= 2100){
              $dots[$record->GCM] = $record->TOE;
            }
          } else {
            $box[$record->GCM] = $record->TOE;
          }
        }

        $oneboxplot = array(
          "box" => array($box['GCM_ensemble_25'],$box['GCM_ensemble'],$box['GCM_ensemble_75']),
          "dots" => $dots,
          "query" => $query,
        );  
        $csvdata .= array_pop($dots) . "," . array_pop($dots) . "," . array_pop($dots) . "\n";
        
        $jasondata['emergencethreshold' . $emergencethreshold]['emissionscenario' . $emissionscenario]['signalconfidence' . $signalconfidence] = $oneboxplot;
        
      }
    }
  }
  
  
  db_set_active();

  if($verbose_test_mode){ 
    drupal_json_output(print_r($jasondata));
    print($csvdata);
  }
  else{drupal_json_output($jasondata);}
  
}


/*
General:
   - Y-axis title should read: Baseline "Noise" Range
   - The exact TOE [B] should be used - no need to round up to 5 year
   - X-axis: 10-year increments, only up to 2100
   - All boxplots use ModelAgreement [Column K] = XX
   - Left panels: EmisScenario [F] = rcp85.  Right panels: EmisScenario [F]
   = rcp45.
   - Top panels: EmergThres [I] = 95.  Bottom panels: EmergThres [I] = 80.
   *Note: this is reversed on the static boxplot image*
   - The dots: GCM [D] = Model_1, Model_2, ..., Model_21
   - The box indicates 25th, 50th, 75th percentile: GCM [D] =
   GCM_ensemble_25, GCM_ensemble, GCM_ensemble_75, respectively

Within each subplot:
   - Top: SignalConfidence [J] = 95
   - Middle: SignalConfidence [J] = 50
   - Bottom: SignalConfidence [J] = 5
 */


/*
 * Utility to grab distinct values from ToE database which will be used as options offered to user. This is accessed at /
 */
function toewhiskers_cigtoeconfig_function(){
  
  $o = "";
  db_set_active('cig_toe');
  
  $columns = array('REGION','EMISSCENARIO','DATASET','EMERGTHRES','SIGNALCONFIDENCE','MODELAGREEMENT','GCM');
  foreach ($columns as $column) {
    $o .= "<br/>" . $column . "<br/>";
    $query = "SELECT DISTINCT " . $column . " FROM {SCEN1_DATA_V1}";
    
    $result = db_query($query);
    // Result is returned as a iterable object that returns a stdClass object on each iteration
    foreach ($result as $record) {
      $o .= "'" . $record->$column . "' => '" . $record->$column . "',<br/>";
    }
  }
  
  $queries = array('SELECT DISTINCT SCEN1_DATA_V1.VARIABLEID AS k, TOE_DATA_V1.VARIABLENAME AS v FROM SCEN1_DATA_V1 LEFT JOIN TOE_DATA_V1 ON (TOE_DATA_V1.VARIABLEID = SCEN1_DATA_V1.VARIABLEID)');
  
  foreach ($queries as $query) {
    print($query);
    $o .= "<br/>" . $query . "<br/>";   
    $result = db_query($query);
    // Result is returned as a iterable object that returns a stdClass object on each iteration
    foreach ($result as $record) {
      $o .= $record->k . "|" . $record->v . "<br/>";
    }
  }
  db_set_active();
  
  $o .= "<pre>  				
Dataset				Dataset
GCM - Phase 2				GCM
BCSD5				Statistically-downscaled (CMIP5 BCSD)
WRF - Phase 2				Dynamically-downscaled
				
EmergThres				Tolerance:          Text to appear on website (e.g. in timeline title)
95				  Low (middle 90% of historical fluctuations)
80				 High (middle 60% of historical fluctuations)
				
				
SignalConfidence				
Confidence:
5				Low (5% confidence interval)
50				Medium (50% confidence interval)
95				High (95% confidence interval)
v				
Lower bound (earlier ToE)
Central tendency
Upper bound (later ToE)
			
      
ModelAgreement				Model agreement:
25				Low (25%)
50				Medium (50%)
75				High (75%)
				
				
EmisScenario				Emission Scenario:
rcp45				RCP4.5
rcp85				RCP8.5
A1B				SRES A1B
B1				SRES B1</pre>
";
  
  print($o);
  
}
