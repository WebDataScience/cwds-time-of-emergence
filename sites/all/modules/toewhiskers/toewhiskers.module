<?php

// Error reporting code
error_reporting(E_ALL);
ini_set('display_errors', TRUE);
ini_set('display_startup_errors', TRUE);

global $maindatatable;
$maindatatable = "variablev7";
global $lookupdatatable;
$lookupdatatable = "lookupv3";

function toewhiskers_menu() {
  $items['explore'] = array(
    'page callback' => 'toewhiskers_explore_page_function',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  $items['compare'] = array(
    'page callback' => 'toewhiskers_compare_page_function',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  $items['map'] = array(
    'page callback' => 'toewhiskers_map_page_function',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  $items['mapdetails'] = array(
    'page callback' => 'toewhiskers_mapdetails_page_function',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  $items['displaymap'] = array(
    'page callback' => 'toewhiskers_displaymap_page_function',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  $items['timeline'] = array(
    'page callback' => 'toewhiskers_page_function',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  $items['timelinedata'] = array(
    'page callback' => 'toewhiskers_json_query_function',
    'access callback' => TRUE,
  );
  $items['exporttimelinedata'] = array(
    'page callback' => 'toewhiskers_exporttimelinedata_function',
    'access callback' => TRUE,
  );
  $items['boxplotdata'] = array(
    'page callback' => 'toewhiskers_json_query_boxplot_function',
    'page arguments' => array(1,2),
    'access callback' => TRUE,
  );
  $items['dotplotdata'] = array(
    'page callback' => 'toewhiskers_json_query_dotplot_function',
    'page arguments' => array(1,2),
    'access callback' => TRUE,
  );
  $items['map/variablelist'] = array(
    'page callback' => 'toewhiskers_variablelist_function',
    'page arguments' => array(2,3,4,5),
    'access callback' => TRUE,
  );
  return $items;
}


function toewhiskers_theme(){
  return array(
    'explore_template' => array(
      'template' => 'page-explore',
    ),
    'compare_template' => array(
      'template' => 'page-toewhiskers',
    ),
    'map_template' => array(
      'template' => 'page-toewhiskers',
    ),
    'mapdetails_template' => array(
      'template' => 'page-toewhiskers',
    ),
    'displaymap_template' => array(
      'template' => 'page-map',
    ),
    'timeline_template' => array(
      'template' => 'page-timeline',
    ),
  );
}


function toewhiskers_explore_page_function(){  
  $_SESSION['compare'] = NULL;
  drupal_add_js(drupal_get_path('module', 'toewhiskers') . '/js/exploreform.js');
  drupal_set_title('Explore');  
  return theme('explore_template');  
}
function toewhiskers_compare_page_function(){ 
  drupal_add_js(drupal_get_path('module', 'toewhiskers') . '/js/compareform.js');
  drupal_set_title('Select Input Parameters'); 
  return theme('compare_template');  
}
function toewhiskers_map_page_function(){ 
  drupal_add_js(drupal_get_path('module', 'toewhiskers') . '/js/mapform.js');
  drupal_set_title('Choose variable to map'); 
  return theme('map_template');  
}
function toewhiskers_mapdetails_page_function(){ 
  drupal_add_js(drupal_get_path('module', 'toewhiskers') . '/js/mapdetailsform.js');
  drupal_set_title('Refine Map Query'); 
  return theme('mapdetails_template');  
}
function toewhiskers_displaymap_page_function(){ 
  drupal_add_css(drupal_get_path('module', 'toewhiskers') . '/css/nivo-default-theme.css');
  drupal_add_css(drupal_get_path('module', 'toewhiskers') . '/css/nivo-slider.css');
  drupal_add_js(drupal_get_path('module', 'toewhiskers') . '/js/nivo_slider.js');
  drupal_add_js(drupal_get_path('module', 'toewhiskers') . '/js/mapdetailsform.js');
  drupal_add_js(drupal_get_path('module', 'toewhiskers') . '/js/displaymap.js');
  drupal_set_title('One Hydro-climatic Variable by Region'); 
  return theme('displaymap_template');  
}
function template_preprocess_explore_template(&$variables) {
  $form = drupal_get_form('toewhiskers_explore_form');
  $o = drupal_render($form);
  $variables['explore_form'] = $o;
}
function template_preprocess_compare_template(&$variables) {
  $form = drupal_get_form('toewhiskers_compare_form');
  $o = drupal_render($form);
  $variables['explore_form'] = $o;
}
function template_preprocess_timeline_template(&$variables) {
  $variables['parameterform'] = toewhiskers_renderwebformelement_function();
  $block = module_invoke('block', 'block_view', '17');
  $variables['timelineinterpretivetext'] = render($block['content']);
  $block = module_invoke('block', 'block_view', '18');
  $variables['toerangeinterpretivetext'] = render($block['content']);
}
function template_preprocess_map_template(&$variables) {
  $form = drupal_get_form('toewhiskers_map_form');
  $o = drupal_render($form);
  $variables['explore_form'] = $o;
}
function template_preprocess_mapdetails_template(&$variables) {
  $form = drupal_get_form('toewhiskers_mapdetails_form');
  $o = drupal_render($form);
  $variables['explore_form'] = $o;
}
function template_preprocess_displaymap_template(&$variables) {
  $maparray = isset($_SESSION['map'])?$_SESSION['map']:array();
  $variables['pathtomap'] = drupal_get_path('module', 'toewhiskers');
  $variables['pathtoimage'] = $variables['pathtomap'] . "/images/maps/" . $maparray['stage2filename'];
  $variables['imagefilename'] = $maparray['stage2filename'];
  $variables['stage2path'] = $variables['pathtomap'] . "/images/maps/";
  $variables['imagefilenamenop'] = $maparray['stage2filenamenop'];
  $variables['maptype'] = $maparray['maptype'];
  if($maparray['maptype'] == '1'){
    if($maparray['datasetimagecode'] == '1' || $maparray['datasetimagecode'] == '2'){
      $block = module_invoke('block', 'block_view', '8');
      $variables['interpretivetext'] = render($block['content']);
    }
    if($maparray['datasetimagecode'] == '3'){
      $block = module_invoke('block', 'block_view', '9');
      $variables['interpretivetext'] = render($block['content']);
    }
  }
  if($maparray['maptype'] == '2'){
    if($maparray['datasetimagecode'] == '1' || $maparray['datasetimagecode'] == '2'){
      $block = module_invoke('block', 'block_view', '13');
      $variables['interpretivetext'] = render($block['content']);
    }
    if($maparray['datasetimagecode'] == '3'){
      $block = module_invoke('block', 'block_view', '14');
      $variables['interpretivetext'] = render($block['content']);
    }
  } 
  $form = drupal_get_form('toewhiskers_mapdetails_form');
  $variables['map_detail_form'] = drupal_render($form);
}
function toewhiskers_explore_form($form, &$form_submit) {
  module_load_include('inc', 'toewhiskers', 'includes/toewhiskers.regionlookup');
  $previousvaluesearray = isset($_SESSION['compare'])?$_SESSION['compare']:array();
  $form['compare'] = array(
    '#type' => 'radios',
    '#title' => t('I want to focus on...'),
    '#options' => array( 0 => 'which type of changes could occur first (in a specific locale)', 1 => 'where changes could occur first (across the region)', /* 2 => 'Examine hotspots', */ ),
    '#required' => TRUE,
  );
  $form['geodomain'] = array(
    '#type' => 'radios',
    '#title' => t('Choose location of interest'),
    '#options' => array( 1 => 'County', 2 => 'Watershed (8-digit/4th-level HUC)',  3 => 'River',  ),
    '#default_value' => '1',
  );
  $form['regioncounty'] = array(
    '#type' => 'select',
    '#title' => t('Region'),
    '#options' => toewhiskers_getregionarray(),
    '#multiple' => FALSE,
    '#required' => TRUE,
    '#default_value' => '2.1.17',
  );
  $form['regionwatershed'] = array(
    '#type' => 'select',
    '#title' => t('Region'),
    '#options' => toewhiskers_get_watershed_array(),
    '#multiple' => FALSE,
    '#required' => TRUE,
    '#default_value' => 'NULL',
  );
  $form['regionstreamflow'] = array(
    '#type' => 'select',
    '#title' => t('Region'),
    '#options' => toewhiskers_get_streamflow_regions_array(),
    '#multiple' => FALSE,
    '#required' => TRUE,
    '#default_value' => 'NULL',
  );
  $form['submit'] = array(
    '#title' => t('Next'),
    '#value' => 'Next',
    '#type' => 'submit',
  );
  $form_submit['redirect'] = 'compare';
  return $form;
}


/**
 * Validate handler for the '/explore' form.
 */
function toewhiskers_explore_form_validate($form, &$form_state) {
  // Grab session values if present.
  $comparearray = isset($_SESSION['compare'])?$_SESSION['compare']:array();
  $comparearray['compare'] = check_plain($form_state['values']['compare']);
  if($comparearray['compare'] == 0){
    $comparearray['geodomain'] = check_plain($form_state['values']['geodomain']); 
    if($comparearray['geodomain'] == '1'){
      $regionVal = check_plain($form_state['values']['regioncounty']);
      $safelist = toewhiskers_getregionarray();
      if(!(array_key_exists($regionVal,$safelist))){
        form_set_error('regioncounty', t("Please select a county region."));
      }
    }
    if($comparearray['geodomain'] == '2'){
      $regionVal = check_plain($form_state['values']['regionwatershed']);
      $safelist = toewhiskers_get_watershed_array();
      if(!(array_key_exists($regionVal,$safelist))){
        form_set_error('regionwatershed', t("Please select a watershed region."));
      }
    }
    if($comparearray['geodomain'] == '3'){
      $regionVal = check_plain($form_state['values']['regionstreamflow']);
      $safelist = toewhiskers_get_streamflow_regions_array();
      if(!(array_key_exists($regionVal,$safelist))){
        form_set_error('regionstreamflow', t("Please select a streamflow region."));
      }
    }
  }
}

/**
 * Submit handler for the '/explore' form.
 */
function toewhiskers_explore_form_submit($form, &$form_state) {
  // Grab session values if present.
  $comparearray = isset($_SESSION['compare'])?$_SESSION['compare']:array();
  $comparearray['compare'] = check_plain($form_state['values']['compare']);
  if($comparearray['compare'] == 0){
    $comparearray['geodomain'] = check_plain($form_state['values']['geodomain']); 
    if($comparearray['geodomain'] == '1'){
      $regionVal = check_plain($form_state['values']['regioncounty']);
      $comparearray['region'] = $regionVal;
       $comparearray['regionname'] = check_plain($form_state['complete form']['regioncounty']['#options'][$regionVal]);
    }
    if($comparearray['geodomain'] == '2'){
      $regionVal = check_plain($form_state['values']['regionwatershed']);
      $comparearray['region'] = $regionVal;
      $comparearray['regionname'] = check_plain($form_state['complete form']['regionwatershed']['#options'][$regionVal]);
    }
    if($comparearray['geodomain'] == '3'){
      $regionVal = check_plain($form_state['values']['regionstreamflow']);
      $comparearray['region'] = $regionVal;
      $comparearray['regionname'] = check_plain($form_state['complete form']['regionstreamflow']['#options'][$regionVal]);
    }
  }
  $_SESSION['compare'] = $comparearray;
  $form_state['redirect'] = 'compare';
  if($comparearray['compare'] == 1) { $form_state['redirect'] = 'map';  }
}


function toewhiskers_page_function(){
  drupal_add_js('https://www.google.com/jsapi');
  drupal_add_js("https://www.google.com/jsapi?autoload={'modules':[{'name':'visualization','version':'1','packages':['timeline']}]}");
  drupal_add_js(drupal_get_path('module', 'toewhiskers') . '/js/chart.js');
  drupal_add_css(drupal_get_path('module', 'toewhiskers') . '/css/toewhiskers.css');
  // Set the value of the 'I want' to be 'compare' so that subsequent form submissions redirect to this page.
  $_SESSION['compare']['compare'] = 0;
  return theme('timeline_template');
}


function toewhiskers_renderwebformelement_function(){  
  //This works to build initial forms that have no selections made yet.
  $form = drupal_get_form('toewhiskers_compare_form');
  $o = drupal_render($form);
  return $o;
}

function toewhiskers_compare_form($form,&$form_submit) {
  // Session variable used to prepopulate if available.
  $comparearray = isset($_SESSION['compare'])?$_SESSION['compare']:array();
  //drupal_set_message('comparearray:<pre>'. print_r($comparearray, TRUE) .'</pre>');
  $form['narrow'] = array(
    '#type' => 'fieldset',
    '#title' => t('1. Filter variables (optional)'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  if($comparearray['geodomain'] == 1 || $comparearray['geodomain'] == 2 ){
    toewhiskers_narrow_subform_theme($form);
  } else {
    $form['narrow']['hiddentheme'] = array('#type' => 'hidden', '#value' => 4);
  }
  toewhiskers_narrow_subform($form);
  $form['variablefieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('2. Select one or more variables*'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $filterarraylist = variablesarray();
  $options = $filterarraylist['variablesarray'];
  $form['variablefieldset']['variable'] = array(
    '#type' => 'select',
    '#options' => $options,    
    '#description' => t('To select multiple options, hold down “ctrl” or “command” key'),
    '#multiple' => TRUE,
    '#required' => TRUE,
    '#default_value' => isset($comparearray['variable'])?$comparearray['variable']:'',
    '#cols' => 120,
    '#size' => 10,
  );
  $form['parameter'] = array(
    '#type' => 'fieldset',
    '#title' => t('3. Specify choices*'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $options = array( 'high' => 'High (RCP8.5/A1B)', 'low' => 'Low (RCP4.5/B1)',  );
  $form['parameter']['emission'] = array(
    '#type' => 'radios',
    '#title' => t('Emission Scenario'),
    '#options' => $options,
    '#required' => TRUE,
    '#default_value' => isset($comparearray['emission'])?$comparearray['emission']:key($options),
    '#label_attributes' => array(
      'data-toggle'=> 'tooltip',
      'title' => t('Selecting “High” emissions scenario results in earlier emergence, due to greater atmospheric concentrations of greenhouse gases, aerosols etc. Selecting “Low” results in later emergence, due to lower atmospheric concentrations.'),
    ),

  );
  $options = array('95' => 'Low (to extreme 5% high or 5% low of 1950-1999 conditions)', '80' => 'High (to extreme 20% high or 20% low of 1950-1999 conditions)',);
  $form['parameter']['tolerance'] = array(
    '#type' => 'radios',
    '#title' => t('Management Sensitivity'),
    '#options' => $options,
    '#required' => TRUE,
    '#default_value' => isset($comparearray['tolerance'])?$comparearray['tolerance']:key($options),
    '#label_attributes' => array(
      'data-toggle'=> 'tooltip',
      'title' => t('Selecting “High” management sensitivity to changing conditions results in earlier emergence. Selecting “Low” results in later emergence.'),
    ),
  );
  /*$options = array('95' => 'Fast', '50' => 'Moderate', '5' => 'Slow',);
  $form['parameter']['confidence'] = array(
    '#type' => 'radios',
    '#title' => t('Estimated Rate of Climate Change'),
    '#options' => $options,
    '#required' => TRUE,
    '#default_value' => isset($comparearray['confidence'])?$comparearray['confidence']:50,//key($options),
        '#label_attributes' => array(
      'data-toggle'=> 'tooltip',
      'title' => t('Selecting “Fast” results in earlier emergence. Selecting “Slow” results in later emergence. And selecting “Central” results in emergence roughly centered between “Fast” and “Slow”.'),
    ),
  );*/
  $options = array('fast' => 'Fast', 'moderate' => 'Moderate', 'slow' => 'Slow',);
  $form['parameter']['rateofchange'] = array(
    '#type' => 'radios',
    '#title' => t('Estimated Rate of Climate Change'),
    '#options' => $options,
    '#required' => TRUE,
    '#default_value' => isset($comparearray['rateofchange'])?$comparearray['rateofchange']:'moderate',
    '#label_attributes' => array(
      'data-toggle'=> 'tooltip',
      'title' => t('Selecting “Fast” results in earlier emergence. Selecting “Slow” results in later emergence. And selecting “Central” results in emergence roughly centered between “Fast” and “Slow”.'),
    ),
  );
  $form['parameter']['submit'] = array(
    '#title' => t('Calculate'),
    '#value' => 'Show Results',
    '#type' => 'submit',
    );
  return $form;
}

/*
 * Helper function for forms that reuse the 'narrow variables' filters.
 */
function toewhiskers_narrow_subform(&$form){
  $options = queryForImpact();
  $form['narrow']['impact'] = array(
    '#type' => 'radios',
    '#title' => t('Related Impact'),
    '#options' => $options,
    '#default_value' => '0',
  ); 
  $averageextremeoptions = array(2 => 'All', 0 => 'Average', 1 => 'Extreme',);
  $form['narrow']['descriptor'] = array(
    '#type' => 'radios',
    '#title' => t('Type'),
    '#options' => $averageextremeoptions,
    '#default_value' => '2',
  );
  $form['narrow']['type'] = array(
    '#type' => 'radios',
    '#title' => t('Type'),
    '#options' => array(0 => 'All', 1 => 'Monthly', 2 => 'Seasonal', 3 => 'Annual'),
    '#default_value' => '0',
    '#suffix' => '<div class="clearfix"></div>',
  ); 
  $form['narrow']['filter'] = array(
    '#type' => 'button',
    '#value' => t('Filter'),
  );
}

/*
 * Helper function for forms that reuse the 'narrow variables' filters. Provides only the 'theme' options.
 */
function toewhiskers_narrow_subform_theme(&$form){
  $options = array(4 => 'All',0 => 'Air Temperature', 1 => 'Precipitation', 2 => 'Hydrologic', /*3 => 'Stream',*/ );
  // Not all themes are represented in '$options' at this time.
  $form['narrow']['theme'] = array(
    '#type' => 'radios',
    '#title' => t('Theme'),
    '#options' => $options,
    '#default_value' => '4',
  );
}


/**
 * Submit handler for the 'compare' form.
 */
function toewhiskers_compare_form_submit($form, &$form_state) {
  //drupal_set_message('formstate:<pre>'. print_r($form_state, TRUE) .'</pre>');
  // Grab session values if present.
  $comparearray = isset($_SESSION['compare'])?$_SESSION['compare']:array();
  $comparearray['variable'] = toewhiskers_clean_array($form_state['values']['variable']);
  $comparearray['emission'] = check_plain($form_state['values']['emission']);
  $comparearray['tolerance'] = check_plain($form_state['values']['tolerance']);
  /*$comparearray['confidence'] = check_plain($form_state['values']['confidence']);*/
  $comparearray['rateofchange'] = check_plain($form_state['values']['rateofchange']);
  $_SESSION['compare'] = $comparearray;
  $compare = $_SESSION['compare'];

  // If initial compare option was 'View the priority areas for climate change response action' send user to /density-maps instead of /timeline
  if ($compare['compare'] == 2) {
    $form_state['redirect'] = 'density-maps';
  } else {
    $form_state['redirect'] = 'timeline';
  }
}


function toewhiskers_map_form($form,&$form_submit) {
  // Session variable unset at beginning of map form.
  unset($_SESSION['map']);
  $form['narrow'] = array(
    '#type' => 'fieldset',
    '#title' => t('Choose one variable. You may narrow list of available Hydroclimatic Variables by following:'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  toewhiskers_narrow_subform_theme($form);
  toewhiskers_narrow_subform($form);
  $form['variablefieldset'] = array(
    '#type' => 'fieldset',
    '#title' => t('Select one variable:*'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $filterarraylist = variablesarray();
  $options = $filterarraylist['variablesarray'];
  $form['variablefieldset']['variable'] = array(
    '#type' => 'select',
    '#options' =>  $options,
    '#description' => t('Select one hydroclimatic variable.'),
    '#required' => TRUE,
    //'#default_value' => current($options),
    '#cols' => 120,
    '#size' => 10,    
  );
  $form['parameter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Apply the following parameters to the query:'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['parameter']['maptype'] = array(
    '#type' => 'radios',
    '#title' => t('Choose Map Type'),
    '#options' => array('1' => 'Emergence Year (median)', '2' => 'Emergence Location (showing model agreement on emergence)', ),
    '#required' => TRUE,
    '#default_value' => '1',
  );
  $extentoptions = array(1 => 'Pacific Northwest', 2 => 'Puget Sound', );
  $form['parameter']['extent'] = array(
    '#type' => 'radios',
    '#title' => t('Choose domain of interest'),
    '#options' => $extentoptions,
    '#default_value' => '1',
  );
  $form['parameter']['submit'] = array(
    '#title' => t('Calculate'),
    '#value' => 'Next',
    '#type' => 'submit',
    );
  return $form;
}


function toewhiskers_map_form_validate($form, &$form_state) {
  if ($form_state['values']['variable'] == null){
    form_set_error('title', t('Please pick one variable before proceeding.'));
  }
}


/**
 * Submit handler for the 'map' form.
 */
function toewhiskers_map_form_submit($form, &$form_state) {
  // Grab session values if present.
  $maparray = isset($_SESSION['map'])?$_SESSION['map']:array();
  $maparray['theme'] = check_plain($form_state['values']['theme']);
  $maparray['impact'] = check_plain($form_state['values']['impact']);
  $maparray['variable'] = check_plain($form_state['values']['variable']);
  $maparray['maptype'] = check_plain($form_state['values']['maptype']);
  if($maparray['maptype'] == 1){$maparray['maptypeimagecode'] = 1;}
  if($maparray['maptype'] == 2){$maparray['maptypeimagecode'] = 2;}
  $maparray['extent'] = check_plain($form_state['values']['extent']);
  // Set session variable.
  $_SESSION['map'] = $maparray;
  $form_state['redirect'] = 'mapdetails';
}


function toewhiskers_mapdetails_form($form,&$form_submit) {
  // User has supplied variable, maptype (emergence year or location), and Extent(PNW or Puget Sound). Let's present parameter choices for:
  // Emergence Year => tolerance,scenario,boundaries,dataset(db lookup based on vid)
  // Emergence Loc  => tolerance,scenario,boundaries,dataset(db lookup based on vid),timeperiod
  
  $maparray = isset($_SESSION['map'])?$_SESSION['map']:array();
  global $lookupdatatable;
  $query = "SELECT theme FROM " . $lookupdatatable . " WHERE variableid = '" . $maparray['variable'] . "'";
  db_set_active('cig_toe');
  $theme = db_query($query)->fetchField();
  db_set_active();

  $datasetoptions = array( "d1" => "BCSD5", "d2"=>"BCSD3", "d3" => "ECHAM5-WRF [results only available for High (A1B) emissions scenario]");
  if($theme == "Streamflow"){ $datasetoptions = array( "d1" => "BCSD5", "d2"=>"BCSD3"); }
  if($theme == "Hydrologic"){ $datasetoptions = array( "d2"=>"BCSD3", "d3" => "ECHAM5-WRF [results only available for High (A1B) emissions scenario]"); }
  
  db_set_active();
  $maparray = isset($_SESSION['map'])?$_SESSION['map']:array();
  $form['parameter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Apply the following parameters to the query:'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $form['parameter']['emergthres'] = array(
    '#type' => 'radios',
    '#title' => t('Management Sensitivity'),
    '#options' => array('2' => 'Low (to extreme 10% of 1950-1999 conditions)', '1' => 'High (to extreme 40% of 1950-1999 conditions)',),
    '#default_value' => isset($maparray['emergthres'])?$maparray['emergthres']:'2',
    '#label_attributes' => array(
      'data-toggle'=> 'tooltip',
      'title' => t('Selecting “High” management sensitivity to changing conditions results in earlier emergence. Selecting “Low” results in later emergence.'),
    ),
  );
  $form['parameter']['emissionscenario'] = array(
    '#type' => 'radios',
    '#title' => t('Emission Scenario'),
    '#options' => array(1 => 'Low (RCP45/B1)', 2 => 'High (RCP85/A1B)', ),
    '#default_value' => isset($maparray['emissionscenario'])?$maparray['emissionscenario']:'1',
    '#label_attributes' => array(
      'data-toggle'=> 'tooltip',
      'title' => t('Selecting “High” emissions scenario results in earlier emergence, due to greater atmospheric concentrations of greenhouse gases, aerosols etc. Selecting “Low” results in later emergence, due to lower atmospheric concentrations.'),
    ),
  );
  $form['parameter']['boundary'] = array(
    '#type' => 'radios',
    '#title' => t('Boundary'),
    '#options' => array(1 => 'State', 2 => 'County', 3 => 'Watershed', 4 => 'Tribal Land', ),
    '#default_value' => isset($maparray['boundary'])?$maparray['boundary']:'1',
  );
  $form['parameter']['dataset'] = array(
    '#type' => 'radios',
    '#title' => t('Dataset'),
    '#options' => $datasetoptions,
    '#default_value' => isset($maparray['dataset'])?$maparray['dataset']:key($datasetoptions),
  );
	$form['submit'] = array(
    '#title' => t('Calculate'),
    '#value' => 'Query for map',
    '#type' => 'submit',
  );
  return $form;
}


/**
 * Submit handler for the 'mapdetails' form.
 */
function toewhiskers_mapdetails_form_submit($form, &$form_state) {
  $maparray = isset($_SESSION['map'])?$_SESSION['map']:array();
  
  $maparray['emergthres'] = check_plain($form_state['values']['emergthres']);
  $maparray['emissionscenario'] = check_plain($form_state['values']['emissionscenario']);
  $maparray['boundary'] = check_plain($form_state['values']['boundary']);
  $maparray['dataset'] = check_plain($form_state['values']['dataset']);
  $maparray['datasetimagecode'] = 1;
  $formsubmitdataset = check_plain($form_state['values']['dataset']);
  if(strcasecmp ($formsubmitdataset, "d1") == 0){$maparray['datasetimagecode'] = 1;}
  if(strcasecmp ($formsubmitdataset, "d2") == 0){$maparray['datasetimagecode'] = 2;}
  if(strcasecmp ($formsubmitdataset, "d3") == 0){$maparray['datasetimagecode'] = 3;}
  $maparray['period'] = (array_key_exists('period', $form_state['values']))?check_plain($form_state['values']['period']):'';
  
  $_SESSION['map'] = $maparray;
  
  // Files of this format in /sites/all/modules/toewhiskers/images/maps   m1_e1_b1_1.01_t1_s1_c2_d1[_p1].png
  $maparray['stage2filename'] = "m" . $maparray['maptype'] . "_e" . $maparray['extent'] . "_b" . $maparray['boundary'] . "_" . ltrim($maparray['variable'], 'V') . "_t"   . $maparray['emergthres'] . "_s" . $maparray['emissionscenario'] . "_c2" . "_d" . $maparray['datasetimagecode'] ;
  $maparray['stage2filenamenop'] = $maparray['stage2filename'];
  if(array_key_exists('maptype', $maparray) && $maparray['maptype'] == 2 ){$maparray['stage2filename']  .= "_p" . $maparray['period'];}
  $maparray['stage2filename'] .= ".png";  

  //drupal_set_message('maparray:<pre>'. print_r($maparray, TRUE) .'</pre>');
  $_SESSION['map'] = $maparray;
  $form_state['redirect'] = 'displaymap';  
}


function toewhiskers_clean_array($array, $filter = 'check_plain') {
  $clean = array();
  foreach ($array as $key => $val) {
    if (is_array($val)) {
      $clean[$filter($key)] = clean_array($val, $filter);
    }
    else {
      $clean[$filter($key)] = $filter($val);
    }
  }
  return $clean;
}


/*
 * Ajax/JSON data retriever.
 */
function toewhiskers_json_query_function(){
  //drupal_set_message('formstate:<pre>'. print_r($_SESSION['compare'], TRUE) .'</pre>');
  global $maindatatable;
  global $lookupdatatable;
  
  $max_TOE_year = 2100;
  $compare = $_SESSION['compare'];
  // Multiple variables allowed.
  $variables = implode("','",$compare['variable']);
  $variables = str_replace(" ", "", $variables);
  // Radios
  $emission = trim($compare['emission']);
  // Checkboxes
  $tolerance = trim($compare['tolerance']);
  $confidence = trim($compare['confidence']);
  $rateofchange = trim($compare['rateofchange']);
  $region = trim($compare['region']);
  $timelinedata = array();
  
  //Query for the timeline chart portion of /timeline page.
  $val = array(
    'maindatatable' => $maindatatable,
    'lookupdatatable' => $lookupdatatable,
    'variables' => $variables,
    'region' => $region,
    'tolerance' => $tolerance,
    'confidence' => $confidence,
    'rateofchange' => $rateofchange,
    'max_TOE_year' => $max_TOE_year,
    'emission' => $emission,
  );
  $query = toewhiskers_timeline_query($val);
  //drupal_set_message($query);
  
  $timelinequery = $query;
  $timelinequery = str_replace("{", "", $timelinequery);
  $timelinequery = str_replace("}", "", $timelinequery); 
    
  // Setup to query non Drupal database.
  db_set_active('cig_toe');
  
  $result = db_query($query);
  // Result is returned as a iterable object that returns a stdClass object on each iteration
  foreach ($result as $record) {
    
    // Function to translate ugly short name value in DB to pretty names:
    if($record->VARIABLESHORTNAME == "#Tmax>90degF(32.2deg"){$record->VARIABLESHORTNAME = "#Tmax>90°F(32.2°C)";}
    // Replace '>=' with a proper utf code.
    $record->VARIABLESHORTNAME = toewhiskers_utfencode($record->VARIABLESHORTNAME);
    
    // Parse ranges to support additional logic.
    $signalconfidencearray = explode(',',$record->SIGNALCONFIDENCERANGE);
    $changedirarray = explode(',',$record->CHANGEDIRRANGE);
    $toearray = explode(',',$record->TOERANGE);
    
    $changedirrange = array_combine($signalconfidencearray,$changedirarray);
    $toerange = array_combine($signalconfidencearray,$toearray);
    
    $changedir = $changedirrange['50'];
    $toe = 0;
    
    // Additional logic.
    if(($changedirrange['50'] == '0') && ($rateofchange != 'moderate')){
      break;
    }
    if($rateofchange == 'moderate'){
      $toe = $toerange['50'];
    }
    if(($rateofchange == 'fast' && $changedirrange['50'] == '1') || ($rateofchange == 'slow' && $changedirrange['50'] == '-1')){
      $toe = $toerange['95'];
    }
    if(($rateofchange == 'slow' && $changedirrange['50'] == '1') || ($rateofchange == 'fast' && $changedirrange['50'] == '-1')){
      $toe = $toerange['5'];
    }
    
    
    $timelinedata[] = array(
      //$record->CHANGEDIR,
      $changedir,
      //intval($record->TOE),
      intval($toe),
      $record->VARIABLENAME,
      $record->VARIABLEID,
      //round($record->TOE/5)*5,
      round($toe/5)*5,
      $record->VARIABLESHORTNAME,
      $record->EMISSCENARIO,
      $record->DATASET,
    );
    
  }  // End timeline data query.
  
  $csvvariables = array(
    'VARIABLESHORTNAME'=> 'Variable',
    'TOE'=> 'ToE_CentralTendency',
    'TOE_RANGE' => 'ToE_Range',
    'CHANGEDIR'=> 'Direction_of_Change',
    'DATASET' => 'Dataset',
  );
  $csv = implode(",", array_values($csvvariables)) . "\n";
  
   
  $toe_array =  array();
  $variable_object = new stdClass();
  $toe = "Beyond " . $max_TOE_year;
  
  // Query for 'table' portion of /timeline page.
  $query = "SELECT ". $maindatatable.".*," . $lookupdatatable . ".VARIABLESHORTNAME 
  FROM {". $maindatatable."}  LEFT JOIN {"
  . $lookupdatatable . "} on (" . $lookupdatatable . ".VARIABLEID = ". $maindatatable.".VARIABLEID) WHERE
  ". $maindatatable.".VARIABLEID in ('" . $variables . "') 
  AND " . $maindatatable.".REGION = '" . $region .   "' 
  AND " . $maindatatable.".EMERGTHRES = " . $tolerance ;
  //AND " . $maindatatable.".SIGNALCONFIDENCE = " . $confidence . "
  if($rateofchange == 'fast'){ 
    $query .= " AND ((" . $maindatatable.".SIGNALCONFIDENCE = 95 AND " . $maindatatable.".CHANGEDIR = 1) OR (" . $maindatatable.".SIGNALCONFIDENCE = 5 AND " . $maindatatable . ".CHANGEDIR = -1)) ";
  }
  if($rateofchange == 'moderate'){ 
    $query .= " AND " . $maindatatable.".SIGNALCONFIDENCE = 50 ";
  }
  if($rateofchange == 'slow'){ 
    $query .= " AND ((" . $maindatatable.".SIGNALCONFIDENCE = 5 AND " . $maindatatable.".CHANGEDIR = 1) OR (" . $maindatatable.".SIGNALCONFIDENCE = 95 AND " . $maindatatable . ".CHANGEDIR = -1)) ";
  }
  $query .= " AND (" . $maindatatable.".MODELAGREEMENT = '25' or " .$maindatatable.".MODELAGREEMENT = '50' or " .$maindatatable.".MODELAGREEMENT = '75') 
  AND (" . $maindatatable.".GCM = 'GCM_ensemble_25' OR ". $maindatatable.".GCM = 'GCM_ensemble' OR ". $maindatatable.".GCM = 'GCM_ensemble_75' ) ";
  if($compare['emission'] == "high"){
    $query .= "AND (". $maindatatable.".EMISSCENARIO = 'rcp85' OR " . $maindatatable.".EMISSCENARIO = 'a1b') ";
  }
  if($compare['emission'] == "low"){
    $query .= "AND (". $maindatatable.".EMISSCENARIO = 'rcp45' OR " . $maindatatable.".EMISSCENARIO = 'b1') ";
  }
  $query .= "  AND (   ( ( " . $lookupdatatable . ".THEME = 'Air temperature' OR " . $lookupdatatable . ".THEME = 'Precipitation' ) AND ". $maindatatable.".DATASET = 'BCSD5')   
  OR   (" . $lookupdatatable . ".THEME = 'Hydrologic' AND ". $maindatatable.".DATASET = 'BCSD3')   
  OR   (" . $lookupdatatable . ".THEME = 'Streamflow' AND (". $maindatatable.".DATASET = 'BCSD3'  OR ". $maindatatable.".DATASET = 'BCSD5') )  ) ";
    
  $result = db_query($query);
  
  // Result is returned as a iterable object that returns a stdClass object on each iteration
  foreach ($result as $record) {
    // On first iteration of loop create object.
    if(!isset($toe_array[$record->VARIABLEID])){
      $toe_array[$record->VARIABLEID] = new stdClass();
      $toe_array[$record->VARIABLEID]->VARIABLESHORTNAME = toewhiskers_utfencode($record->VARIABLESHORTNAME);
      $toe_array[$record->VARIABLEID]->CHANGEDIRTEXT = "Indeterminate";
    }
    // Create rounded TOE value.
    $toe = 0;
    if ($record->TOE <= $max_TOE_year){
      $toe = round($record->TOE/5)*5;
    } 
    // Assign TOE year ranges differently for different models.
    if($record->GCM == 'GCM_ensemble'){
      if($record->MODELAGREEMENT == "25"){
        $toe_array[$record->VARIABLEID]->YEARA = ($toe == 0? "Unknown":$toe);
      }
      if($record->MODELAGREEMENT == "75"){
        $toe_array[$record->VARIABLEID]->YEARB = ($toe == 0? "Unknown":$toe);
      }
    }
    if($record->GCM == 'GCM_ensemble_25'){
      $toe_array[$record->VARIABLEID]->YEARA = $toe;
    }
    if($record->GCM == 'GCM_ensemble_75'){
      $toe_array[$record->VARIABLEID]->YEARB = $toe;
    }
    // CHANGEDIR for table is always at MODELAGREEMENT50
    if($record->MODELAGREEMENT == "50"){
      if($record->CHANGEDIR == "-1"){$toe_array[$record->VARIABLEID]->CHANGEDIRTEXT = "Decreasing";}
      if($record->CHANGEDIR == "1") {$toe_array[$record->VARIABLEID]->CHANGEDIRTEXT = "Increasing";}
    }
  }  // End tabledata query.
 
  $tablequery = $query;
  $tablequery = str_replace("{", "", $tablequery);
  $tablequery = str_replace("}", "", $tablequery);
  
  db_set_active();
  
  $toedata = array(
    "maxtoeyear" => $max_TOE_year,
    "emission" => $emission,
    "confidence" => $confidence,
    "rateofchange" => $rateofchange,
    "tolerance" => $tolerance,
    "timelinedata" => $timelinedata,
    "tabledata" => $toe_array,
    "timelinequery" => $timelinequery,
    "tablequery" => $tablequery,
  );  
  
  // Output JSON data for /timeline AJAX query.
  // Cleaner output for testing only: drupal_json_output(print_r($toedata));
  drupal_json_output($toedata);  
}





/* 
 * Return the 'timeline' query for use by timeline page and 'export timeline data' function.
 */
function toewhiskers_timeline_query($val){
  $query = "SELECT 
  {". $val['maindatatable']."}.TOE,{". $val['maindatatable']."}.VARIABLEID,{" . $val['lookupdatatable'] . "}.VARIABLENAME,{" . $val['lookupdatatable'] . "}.VARIABLESHORTNAME,{". $val['maindatatable']."}.EMISSCENARIO,{" . $val['maindatatable'] . "}.DATASET,
  GROUP_CONCAT(". $val['maindatatable'] . ".CHANGEDIR) AS CHANGEDIRRANGE,
  GROUP_CONCAT(". $val['maindatatable'] . ".SIGNALCONFIDENCE) AS SIGNALCONFIDENCERANGE,
  GROUP_CONCAT(". $val['maindatatable'] . ".TOE) AS TOERANGE
  FROM {". $val['maindatatable'] . "} 
  LEFT JOIN {" . $val['lookupdatatable'] . "} on (" . $val['lookupdatatable'] . ".VARIABLEID = ". $val['maindatatable'].".VARIABLEID) 
  WHERE ". $val['maindatatable'].".VARIABLEID in ('" . $val['variables'] . "') 
  AND ". $val['maindatatable'].".REGION = '" . $val['region'] .   "' 
  AND ". $val['maindatatable'].".EMERGTHRES = " . $val['tolerance'] ;
  //AND ". $val['maindatatable'].".SIGNALCONFIDENCE = " . $val['confidence'] ;
  /*
  if($val['rateofchange'] == 'fast'){ 
    $query .= " AND ((" . $val['maindatatable'].".SIGNALCONFIDENCE = 95 AND " . $val['maindatatable'].".CHANGEDIR = 1) OR (" . $val['maindatatable'].".SIGNALCONFIDENCE = 5 AND " . $val['maindatatable'] . ".CHANGEDIR = -1)) ";
  }
  if($val['rateofchange'] == 'moderate'){ 
    $query .= " AND " . $val['maindatatable'].".SIGNALCONFIDENCE = 50 ";
  }
  if($val['rateofchange'] == 'slow'){ 
    $query .= " AND ((" . $val['maindatatable'].".SIGNALCONFIDENCE = 5 AND " . $val['maindatatable'].".CHANGEDIR = 1) OR (" . $val['maindatatable'] . ".SIGNALCONFIDENCE = 95 AND " . $val['maindatatable'] . ".CHANGEDIR = -1)) ";
  }
  */
  $query .= " AND ". $val['maindatatable'].".TOE <= " . $val['max_TOE_year'] . "
  AND ". $val['maindatatable'].".MODELAGREEMENT = '50' 
  AND ". $val['maindatatable'].".GCM = 'GCM_ensemble' ";
  if($val['emission'] == "high"){    $query .= "AND (". $val['maindatatable'].".EMISSCENARIO = 'rcp85' OR " . $val['maindatatable'].".EMISSCENARIO = 'a1b') ";  }
  if($val['emission'] == "low"){    $query .= "AND (". $val['maindatatable'].".EMISSCENARIO = 'rcp45' OR " . $val['maindatatable'].".EMISSCENARIO = 'b1') ";  }
  $query .= "  AND (   ( ( " . $val['lookupdatatable'] . ".THEME = 'Air temperature' OR " . $val['lookupdatatable'] . ".THEME = 'Precipitation' ) AND ". $val['maindatatable'].".DATASET = 'BCSD5')   
  OR   (" . $val['lookupdatatable'] . ".THEME = 'Hydrologic' AND ". $val['maindatatable'].".DATASET = 'BCSD3')   
  OR   (" . $val['lookupdatatable'] . ".THEME = 'Streamflow' AND (". $val['maindatatable'].".DATASET = 'BCSD3'  OR ". $val['maindatatable'].".DATASET = 'BCSD5') )  )
  GROUP BY ". $val['maindatatable'] . ".VARIABLEID
  ORDER BY {". $val['maindatatable']."}.TOE";
  return($query);
}


/*
 * Ajax/JSON data retriever.
 * This function returns data for the boxplot page.
 */
function toewhiskers_json_query_boxplot_function($variable, $mode = "json"){
  global $maindatatable;
  global $lookupdatatable;
  $compare = $_SESSION['compare'];
  $jasondata = array();
  $safevariablelist = safevariablesarray();
  if(in_array(check_plain($variable), $safevariablelist ) ){
    $jasondata['variable'] = check_plain($variable);
  } 
  $jasondata['regionname'] = $_SESSION['compare']['regionname'];
  $emergencethreshold_array = array('80','95');
  $emissionscenario_array = array('high','low');
  //$signalconfidence_array = array('95','50','5');
  $rateofchange_array = array('fast','moderate','slow');
  
  // Setup to query non Drupal database.
  db_set_active('cig_toe');
  
  // Query for variable name and theme.
  $query = "SELECT variablename,VARIABLESHORTNAME,theme FROM " . $lookupdatatable . " where variableid='" . $variable . "' LIMIT 1";
  $row = (object)db_query($query)->fetchAssoc();
  $jasondata['variablename'] = substr($row->variablename, 0, 70);
  $jasondata['variableshortname'] = toewhiskers_utfencode($row->VARIABLESHORTNAME);
  $jasondata['theme'] = $row->theme;
  $boxplotdata = array();
  $datasets = array();
  
  // Datasets queried predicated on 'theme' of variable.
  if($jasondata['theme'] == 'Air temperature' || $jasondata['theme'] == 'Precipitation'){
    $themequery = " AND " . $maindatatable . ".DATASET = 'BCSD5'";
  }
  if($jasondata['theme'] == 'Hydrologic' ){
    $themequery = " AND ". $maindatatable . ".DATASET = 'BCSD3'";
  }
  if($jasondata['theme'] == 'Streamflow' ){
    $themequery = " AND (". $maindatatable . ".DATASET = 'BCSD3' OR ". $maindatatable . ".DATASET = 'BCSD5') ";
  }
  
  // Query for TOE values.
  foreach ($emergencethreshold_array as $key=>$emergencethreshold){
    foreach ($emissionscenario_array as $key=>$emissionscenario){    
      //foreach ($signalconfidence_array as $key=>$signalconfidence){
      foreach ($rateofchange_array as $key=>$rateofchange){
        $dots = array();
        $box = array('25' => 0, '50' => 0, '75' => 0);
        $toema50 = array();
        $toeandchangedir = array();

        $query="select * from " . $maindatatable . " WHERE variableid='" . $variable . "' and emergthres=" . $emergencethreshold;
        //signalconfidence=" . $signalconfidence . 
        
        if($rateofchange == 'fast'){ 
          $query .= " AND ((" . $maindatatable . ".SIGNALCONFIDENCE = 95 AND " . $maindatatable . ".CHANGEDIR = 1) OR (" . $maindatatable . ".SIGNALCONFIDENCE = 5 AND " . $maindatatable . ".CHANGEDIR = -1)) ";
        }
        if($rateofchange == 'moderate'){ 
          $query .= " AND " . $maindatatable.".SIGNALCONFIDENCE = 50 ";
        }
        if($rateofchange == 'slow'){ 
          $query .= " AND ((" . $maindatatable.".SIGNALCONFIDENCE = 5 AND " . $maindatatable . ".CHANGEDIR = 1) OR (" . $maindatatable . ".SIGNALCONFIDENCE = 95 AND " . $maindatatable . ".CHANGEDIR = -1)) ";
        }
              
        $query .= " AND REGION = '" . $_SESSION['compare']['region'] . "'";
        if($emissionscenario == "high"){
          $query .= " AND (". $maindatatable.".EMISSCENARIO = 'rcp85' OR " . $maindatatable.".EMISSCENARIO = 'a1b') ";
        }
        if($emissionscenario == "low"){
          $query .= " AND (". $maindatatable.".EMISSCENARIO = 'rcp45' OR " . $maindatatable.".EMISSCENARIO = 'b1') ";
        }
        $query .= $themequery;
        
        $result = db_query($query);
        // Result is returned as a iterable object that returns a stdClass object on each iteration
        foreach ($result as $record) {
          $pos = strpos($record->GCM, 'ensemble');
          if ($pos === false) {
            // Exclude dots where TOE is zero.
            if($record->TOE > 0){
              $dots[$record->GCM] = $record->TOE;
              $toeandchangedir[] = array('toe' => $record->TOE, 'dir' => $record->CHANGEDIR);
            }
          } else {
            $box[$record->MODELAGREEMENT] = $record->TOE;
          }
          if($record->MODELAGREEMENT == "50"){
            if($record->TOE > 0){
              $toema50 = array('toe' => $record->TOE, 'dir' => $record->CHANGEDIR);
            }
          }
          $datasets[$record->DATASET] = $record->DATASET;
          
        } 
        
        $oneboxarray = array(0,0,0);
        if($box['25'] > 0 && $box['50'] > 0 && $box['75'] >0 ){
          $oneboxarray = array($box['25'],$box['50'],$box['75']);
        }
        $oneboxplot = array(
          "box" => $oneboxarray,
          "dots" => $dots,
          "toema50" => $toema50,
          "toeandchangedir" => $toeandchangedir,
          "query" => $query,
        );  
        $boxplotdata['emergencethreshold' . $emergencethreshold]['emissionscenario' . $emissionscenario]['rateofchange' . $rateofchange] = $oneboxplot;
      }
    }
  }
  
  // Convert array of datasets into user appropriate text string.
  $jasondata['dataname'] = implode(" AND ", $datasets);
  
  $jasondata = array_merge( $jasondata,$boxplotdata);
  db_set_active();

  if($mode != 'text'){
    drupal_json_output($jasondata);
  } else {
    $usertextconvert = array(
      "emissionscenariohigh" => "High", 
      "emissionscenariolow" => "Low", 
      "emergencethreshold95" => "Low", 
      "emergencethreshold80" => "High",
      "signalconfidence95" => "Fast",
      "signalconfidence50" => "Moderate",
      "signalconfidence5" => "Slow",
      "rateofchangefast" => "Fast",
      "rateofchangemoderate" => "Moderate",
      "rateofchangeslow" => "Slow",
    );
    $o = '"Variable: ' . $jasondata['variablename'] . '"' . "\n";
    $o .= "Variable ID: " . $jasondata['variableshortname'] . "\n";
    $o .= "Variable number: " . $variable . "\n";
    $o .= "Region: " . $jasondata['regionname'] . "\n";
    $o .= "Dataset: " . $jasondata['dataname'] . "\n\n";
    $o .= "Change direction indicates direction of climate change trend associated with each ToE\n" .
          "dir: 1 indicates positive trend (increasing values of the variable as a result of climate change)\n" .
          "dir: -1 indicates negative trend (decreasing values of the variable as a result of climate change)\n\n";
    $csv = "Management Sensitivity,Emission Scenario,Estimated Rate,ToE - median and Change Direction,ToE and Change Direction\n";
    foreach($boxplotdata as $emergencekey=>$emergence){
      foreach($emergence as $emissionkey=>$emission){
        foreach($emission as $signalconfidencekey=>$signalconfidence){
          $boxdata = "";
          $dotsdata = "";
          $toeandchangedirdata = "";
          $toema50 = "";
          if(isset($signalconfidence['toema50']['toe'])){
            $toema50 = "toe:" . $signalconfidence['toema50']['toe'] . ",dir:" . $signalconfidence['toema50']['dir'];
          }
          foreach($signalconfidence as $boxordotskey=>$boxordots){
            if($boxordotskey == 'box'){
              $boxdata = implode(',',$boxordots);
            }
            if($boxordotskey == 'toeandchangedir'){
              foreach($boxordots as $key=>$value){
               $toeandchangedirdata .= "toe:" . $value['toe'] . ",dir:" . $value['dir'] . "," ;
              }
            }
          }
          $csv .= $usertextconvert[$emergencekey] . "," . $usertextconvert[$emissionkey] . "," . $usertextconvert[$signalconfidencekey] . ",\"" . $toema50 ."\",\"" . rtrim($toeandchangedirdata,",") . "\"\n";
    } } } 
    $o .= $csv;
    drupal_add_http_header('Content-Type', 'text/csv; utf-8');
    drupal_add_http_header('Content-Disposition', 'attachment; filename = dataexport.csv');
    print($o);
    
  }
}


/*
 *
 */
function variablesarray($themeindex = 4, $impactindex = 0, $typeindex = 2, $timescaleindex = 0){
  global $maindatatable;
  global $lookupdatatable;
  $comparearray = isset($_SESSION['compare'])?$_SESSION['compare']:array();
  /* Validate user input, define the theme variable if input is valid, repeat for each of the four filters. */
  $theme = NULL;
  if($themeindex == 0) {$theme = 'Air Temperature';}
  if($themeindex == 1) {$theme = 'Precipitation';}
  if($themeindex == 2) {$theme = 'Hydrologic';}
  if($themeindex == 3) {$theme = 'Streamflow';}
  $impact = NULL;
  $impactsarray = queryForImpact();
  if (array_key_exists($impactindex, $impactsarray )  && $impactindex != 0) {
    $impact = $impactsarray[$impactindex];
  }
  $averageextreme = NULL;
  if($typeindex == 0) {$averageextreme = 'Average';}
  if($typeindex == 1) {$averageextreme = 'Extreme';}
  $timescale = NULL;
  if($timescaleindex == 1) {$timescale = 'Monthly';}
  if($timescaleindex == 2) {$timescale = 'Seasonal';}
  if($timescaleindex == 3) {$timescale = 'Annual';}
  $variablesarray = array();
  $o = "";
  db_set_active('cig_toe');
  $query = "SELECT DISTINCT " .$maindatatable. ".VARIABLEID AS k, "
  . $lookupdatatable . ".VARIABLENAME AS v FROM "
  .$maindatatable. " LEFT JOIN " . $lookupdatatable . " ON (" . $lookupdatatable . ".VARIABLEID = "
  .$maindatatable. ".VARIABLEID) WHERE 1=1
  AND (" .$maindatatable.".MODELAGREEMENT = '25' or " .$maindatatable.".MODELAGREEMENT = '75') ";
  if($theme){ $query .= " AND " . $lookupdatatable . ".THEME = '" . $theme . "'";}
  if($impact){ $query .= " AND " . $lookupdatatable . ".IMPACT LIKE '%" . $impact . "%'";} 
  if($averageextreme){ $query .= " AND " . $lookupdatatable . ".AVERAGEEXTREME = '" . $averageextreme . "'";}
  if($timescale){ $query .= " AND " . $lookupdatatable . ".TIMESCALE = '" . $timescale . "'";}
  if(array_key_exists('region', $comparearray)){ $query .= " AND " . $maindatatable . ".REGION = '" . $comparearray['region'] . "'";}
  
  $o .= "<br/>" . $query . "<br/>";   
  $result = db_query($query);
  // Result is returned as a iterable object that returns a stdClass object on each iteration
  foreach ($result as $record) {
    if(isset($record->v)){
      $variablesarray[$record->k] = t($record->v);
    }
  }
  db_set_active();
  
  if(count($variablesarray) == 0){
    $variablesarray[0] = t("No variables match those filter settings");
  }
  $returnarray['filterquery'] = $query;
  $returnarray['variablesarray'] = $variablesarray;
  return $returnarray;
}


/*
 * Used to validate input variable against actual variables in DB.
 */
function safevariablesarray(){
  global $maindatatable;
  $variablesarray = array();
  db_set_active('cig_toe');
  $query = "SELECT DISTINCT VARIABLEID AS k FROM " . $maindatatable ;
  $result = db_query($query);
  // Result is returned as a iterable object that returns a stdClass object on each iteration
  foreach ($result as $record) {
    if(isset($record->v)){
      $variablesarray[$record->k] = t($record->k);
    }
  }
  db_set_active();
  return $variablesarray;
}


function queryForImpact(){
  $impactsarray = array();
  global $lookupdatatable;
  $query = "SELECT DISTINCT impact FROM " . $lookupdatatable;
  db_set_active('cig_toe');
  $result = db_query($query);
  // Result is returned as a iterable object that returns a stdClass object on each iteration
  foreach ($result as $record) {
    if(isset($record->impact)){
      $impact = $record->impact;
      $impactarray = explode("/" , $impact);
      $impactsarray = array_merge($impactsarray, $impactarray);
    }
  }
  db_set_active();
  $impactsarray = array_map('trim',$impactsarray);
  $impactsarray = array_unique($impactsarray);
  sort($impactsarray);
  array_unshift($impactsarray, "All");
  return $impactsarray;    
}


/*
 * Ajax/JSON data retriever.
 */
function toewhiskers_variablelist_function($themeindex,$impactindex,$typeindex,$timescaleindex){
  $variableoptions = variablesarray($themeindex,$impactindex,$typeindex,$timescaleindex);
  if(count($variableoptions) == 0){
    $variableoptions = array( 'No variables available for that set of parameters' );
  }
  drupal_json_output($variableoptions);
}


/*
 * Ajax/JSON data retriever.
 */
function toewhiskers_exporttimelinedata_function(){
  global $maindatatable;
  global $lookupdatatable;
  
  $max_TOE_year = 2100;
  $compare = $_SESSION['compare'];
  // Multiple variables allowed.
  $variables = implode("','",$compare['variable']);
  $variables = str_replace(" ", "", $variables);
  // Radios
  $emission = trim($compare['emission']);
  // Checkboxes
  $tolerance = trim($compare['tolerance']);
  $confidence = trim($compare['confidence']);
  $region = trim($compare['region']);
  
  $val = array(
    'maindatatable' => $maindatatable,
    'lookupdatatable' => $lookupdatatable,
    'variables' => $variables,
    'region' => $region,
    'tolerance' => $tolerance,
    'confidence' => $confidence,
    'max_TOE_year' => $max_TOE_year,
    'emission' => $emission,
  );
  $query = toewhiskers_timeline_query($val);
  
  $timelinequery = $query;
  $timelinequery = str_replace("{", "", $timelinequery);
  $timelinequery = str_replace("}", "", $timelinequery); 
    
  // Setup to query non Drupal database.
  db_set_active('cig_toe');
  $result = db_query($query);
  $csv = "Variable ID,Variable,Dataset,TOE(multi-model median),Change Direction\n";
  // Result is returned as a iterable object that returns a stdClass object on each iteration
  foreach ($result as $record) {
    // Rename one poorly coded variable shortname.
    if($record->VARIABLESHORTNAME == "#Tmax>90degF(32.2deg"){$record->VARIABLESHORTNAME = "#Tmax>90°F(32.2°C)";}
    $csv .= "\"" . toewhiskers_csvencode($record->VARIABLESHORTNAME) . "\",\"" . $record->VARIABLENAME . "\",\"" . $record->DATASET . "\"," . round($record->TOE/5)*5 . "," . $record->CHANGEDIR . "\n";
  }  
  db_set_active();
  
  // Create code to text translations for data export.
  $prettynames['emission'] = array(
    'rcp45'	=> 'RCP4.5',
    'rcp85'	=> 'RCP8.5',
    'A1B'	=>	'SRES A1B',
    'B1'	=>	'SRES B1',
    'low'	=>	'Low (RCP4.5 or B1)',
    'high' =>	'High (RCP8.5 or A1B)',
  );
  $prettynames['confidence'] = array(
    '5'	=>	'Slow',
    '50'	=>	'Moderate',
    '95'	=>	'Fast',
  );
  $prettynames['tolerance'] = array(
    '95'	=>	'Low (to extreme 5% high or 5% low of 1950-1999 conditions)',
    '80'	=>	'High (to extreme 20% high or 20% low of 1950-1999 conditions)',
  );
    
  $o = "Time of Emergence in: " . $_SESSION['compare']['regionname'] . "
Multi-model median
Emissions Scenario: " . $prettynames['emission'][$emission] . "
Management Sensitivity: " . $prettynames['tolerance'][$tolerance] . "
Estimated Rate of Climate Change: " . $prettynames['confidence'][$confidence] . "\n\n" .
"ToE = 0 indicates no emergence\n\n" .
"Change direction indicates direction of climate change trend associated with each ToE\n" .
"Change Direction = 1 indicates positive trend (increasing values of the variable as a result of climate change)\n" .
"Change Direction = -1 indicates negative trend (decreasing values of the variable as a result of climate change)\n" .
"Change Direction = 0 indicates indeterminant trend\n\n";
  $o .= $csv;
      
  $tesmode = FALSE;
  if($tesmode){
    print("<pre>" . $timelinequery . "\n" . $o . "</pre>");
  }
  else{
    drupal_add_http_header('Content-Type', 'text/csv; utf-8');
    drupal_add_http_header('Content-Disposition', 'attachment; filename = dataexport.csv');
    print($o);
  }
}

function toewhiskers_utfencode($html){
  $html = str_replace(">=", "&ge;", $html);
  return($html);
}
function toewhiskers_csvencode($csv){
  $csv = str_replace('"', '""', $csv);
  return($csv);
}








/*
 * Ajax/JSON data retriever.
 * This function returns data for the boxplot page.
 */
function toewhiskers_json_query_dotplot_function($variable, $mode = "json"){
  global $maindatatable;
  global $lookupdatatable;
  $compare = $_SESSION['compare'];
  $jasondata = array();
  $safevariablelist = safevariablesarray();
  if(in_array(check_plain($variable), $safevariablelist ) ){
    $jasondata['variable'] = check_plain($variable);
  } 
  $jasondata['regionname'] = $_SESSION['compare']['regionname'];
  $emergencethreshold_array = array('80','95');
  $emissionscenario_array = array('high','low');
  //$signalconfidence_array = array('95','50','5');
  $rateofchange_array = array('fast','moderate','slow');
  
  // Setup to query non Drupal database.
  db_set_active('cig_toe');
  
  // Query for variable name and theme.
  $query = "SELECT variablename,VARIABLESHORTNAME,theme FROM " . $lookupdatatable . " where variableid='" . $variable . "' LIMIT 1";
  $row = (object)db_query($query)->fetchAssoc();
  $jasondata['variablename'] = substr($row->variablename, 0, 70);
  $jasondata['variableshortname'] = toewhiskers_utfencode($row->VARIABLESHORTNAME);
  $jasondata['theme'] = $row->theme;
  $boxplotdata = array();
  $datasets = array();
  $lastquery = "";
  
  // Datasets queried predicated on 'theme' of variable.
  if($jasondata['theme'] == 'Air temperature' || $jasondata['theme'] == 'Precipitation'){
    $themequery = " AND " . $maindatatable . ".DATASET = 'BCSD5'";
  }
  if($jasondata['theme'] == 'Hydrologic' ){
    $themequery = " AND ". $maindatatable . ".DATASET = 'BCSD3'";
  }
  if($jasondata['theme'] == 'Streamflow' ){
    $themequery = " AND (". $maindatatable . ".DATASET = 'BCSD3' OR ". $maindatatable . ".DATASET = 'BCSD5') ";
  }
  
  // Query for TOE values.
  foreach ($emergencethreshold_array as $key=>$emergencethreshold){
    foreach ($emissionscenario_array as $key=>$emissionscenario){    

        $dots = array();
        $box = array('25' => 0, '50' => 0, '75' => 0);
        $toema50 = array();
        $toeandchangedir = array();

        $query="select GCM,DATASET,";
        $query .= "     
          GROUP_CONCAT(". $maindatatable . ".CHANGEDIR) AS CHANGEDIRRANGE,
          GROUP_CONCAT(". $maindatatable . ".SIGNALCONFIDENCE) AS SIGNALCONFIDENCERANGE,
          GROUP_CONCAT(". $maindatatable . ".TOE) AS TOERANGE,
          GROUP_CONCAT(". $maindatatable . ".MODELAGREEMENT) AS MODELAGREEMENTRANGE";
        $query .= " FROM " . $maindatatable;
        $query .= " WHERE variableid='" . $variable . "' and emergthres=" . $emergencethreshold;                  
        $query .= " AND REGION = '" . $_SESSION['compare']['region'] . "'";
        //$query .= " AND REGION = '" . $_SESSION['compare']['region'] . "'";
        if($emissionscenario == "high"){
          $query .= " AND (". $maindatatable . ".EMISSCENARIO = 'rcp85' OR " . $maindatatable.".EMISSCENARIO = 'a1b') ";
        }
        if($emissionscenario == "low"){
          $query .= " AND (". $maindatatable . ".EMISSCENARIO = 'rcp45' OR " . $maindatatable.".EMISSCENARIO = 'b1') ";
        }
        $query .= $themequery;
        $query .= " GROUP BY ". $maindatatable . ".GCM";
           
        $result = db_query($query);
        
       
        $fastboxplot = array('toeandchangedir' => array() );      
        $moderateboxplot = array('toeandchangedir' => array() ); 
        $slowboxplot = array('toeandchangedir' => array() ); 
      
        // Result is returned as a iterable object that returns a stdClass object on each iteration
        foreach ($result as $record) {
          
          // If GCM is not ensemble than it is MODEL_X and this datapoint is a small dot. Only report dots where TOE is not zero.
          $pos = strpos($record->GCM, 'ensemble');
          if ($pos === false) {          
            // Split concats into arrays with 'signalconfidence' as key.
            $signalconfidencearray = explode(',',$record->SIGNALCONFIDENCERANGE);   
            $changedirrange = array_combine($signalconfidencearray,explode(',',$record->CHANGEDIRRANGE));
            $toerange = array_combine($signalconfidencearray,explode(',',$record->TOERANGE));
              
            if($changedirrange['50'] == '1'){
              if($toerange['95'] > 0){$fastboxplot['toeandchangedir'][] = array('toe' => $toerange['95'], 'dir' => 1);}
              if($toerange['5'] > 0){$slowboxplot['toeandchangedir'][] = array('toe' => $toerange['5'], 'dir' => 1);}
            }
            if($changedirrange['50'] == '-1'){
              if($toerange['5'] > 0){$fastboxplot['toeandchangedir'][] = array('toe' => $toerange['5'], 'dir' => -1);}
              if($toerange['95'] > 0){$slowboxplot['toeandchangedir'][] = array('toe' => $toerange['95'], 'dir' => -1);}
            }
            if($toerange['50'] > 0){$moderateboxplot['toeandchangedir'][] = array('toe' => $toerange['50'], 'dir' => $changedirrange['50']);}
          } else { // 'ensemble' found in 'GCM' so this is the LARGE datapoint.
            // Parse concat lists into arrays.
            $modelagreementrantearray = explode(',',$record->MODELAGREEMENTRANGE);
            $signalconfidencearray = explode(',',$record->SIGNALCONFIDENCERANGE);
            $toearray = explode(',',$record->TOERANGE);
            $changedirarray = explode(',',$record->CHANGEDIRRANGE);
            // Look at concat lists but utilize only MODELAGREEMENT = 50.
            foreach ($modelagreementrantearray as $key=>$value) {
              if($modelagreementrantearray[$key] == '50'){
                $changedirrange[$signalconfidencearray[$key]] = $changedirarray[$key];
                $toerange[$signalconfidencearray[$key]] = $toearray[$key];
              }
            }
            if($changedirrange['50'] == '1'){
              if($toerange['95'] > 0){$fastboxplot['toema50'] = array('toe' => $toerange['95'], 'dir' => 1);}
              if($toerange['5'] > 0){$slowboxplot['toema50'] = array('toe' => $toerange['5'], 'dir' => 1);}
            }
            if($changedirrange['50'] == '-1'){
              if($toerange['5'] > 0){$fastboxplot['toema50'] = array('toe' => $toerange['5'], 'dir' => -1);}
              if($toerange['95'] > 0){$slowboxplot['toema50'] = array('toe' => $toerange['95'], 'dir' => -1);}
            }
            if($toerange['50'] > 0){$moderateboxplot['toema50'] = array('toe' => $toerange['50'], 'dir' => $changedirrange['50']); }
          }
                         
          
          $datasets[$record->DATASET] = $record->DATASET;
          
        } 
         
        $boxplotdata['emergencethreshold' . $emergencethreshold]['emissionscenario' . $emissionscenario]['query'] = $query;
        $boxplotdata['emergencethreshold' . $emergencethreshold]['emissionscenario' . $emissionscenario]['rateofchangefast'] = $fastboxplot;
        $boxplotdata['emergencethreshold' . $emergencethreshold]['emissionscenario' . $emissionscenario]['rateofchangemoderate'] = $moderateboxplot;
        $boxplotdata['emergencethreshold' . $emergencethreshold]['emissionscenario' . $emissionscenario]['rateofchangeslow'] = $slowboxplot;
    }
  }
  
  // Convert array of datasets into user appropriate text string.
  $jasondata['dataname'] = implode(" AND ", $datasets);
  
  $jasondata = array_merge( $jasondata,$boxplotdata);
  db_set_active();

  if($mode != 'text'){
    drupal_json_output($jasondata);
  } else {
    $usertextconvert = array(
      "emissionscenariohigh" => "High", 
      "emissionscenariolow" => "Low", 
      "emergencethreshold95" => "Low", 
      "emergencethreshold80" => "High",
      "signalconfidence95" => "Fast",
      "signalconfidence50" => "Moderate",
      "signalconfidence5" => "Slow",
      "rateofchangefast" => "Fast",
      "rateofchangemoderate" => "Moderate",
      "rateofchangeslow" => "Slow",
    );
    $o = '"Variable: ' . $jasondata['variablename'] . '"' . "\n";
    $o .= "Variable ID: " . $jasondata['variableshortname'] . "\n";
    $o .= "Variable number: " . $variable . "\n";
    $o .= "Region: " . $jasondata['regionname'] . "\n";
    $o .= "Dataset: " . $jasondata['dataname'] . "\n\n";
    $o .= "Change direction indicates direction of climate change trend associated with each ToE\n" .
          "dir: 1 indicates positive trend (increasing values of the variable as a result of climate change)\n" .
          "dir: -1 indicates negative trend (decreasing values of the variable as a result of climate change)\n\n";
    $csv = "Management Sensitivity,Emission Scenario,Estimated Rate,ToE - median and Change Direction,ToE and Change Direction\n";
    foreach($boxplotdata as $emergencekey=>$emergence){
      foreach($emergence as $emissionkey=>$emission){
        foreach($emission as $signalconfidencekey=>$signalconfidence){
          $boxdata = "";
          $dotsdata = "";
          $toeandchangedirdata = "";
          $toema50 = "";
          if(isset($signalconfidence['toema50']['toe'])){
            $toema50 = "toe:" . $signalconfidence['toema50']['toe'] . ",dir:" . $signalconfidence['toema50']['dir'];
          }
          foreach($signalconfidence as $boxordotskey=>$boxordots){
            if($boxordotskey == 'box'){
              $boxdata = implode(',',$boxordots);
            }
            if($boxordotskey == 'toeandchangedir'){
              foreach($boxordots as $key=>$value){
               $toeandchangedirdata .= "toe:" . $value['toe'] . ",dir:" . $value['dir'] . "," ;
              }
            }
          }
          $csv .= $usertextconvert[$emergencekey] . "," . $usertextconvert[$emissionkey] . "," . $usertextconvert[$signalconfidencekey] . ",\"" . $toema50 ."\",\"" . rtrim($toeandchangedirdata,",") . "\"\n";
    } } } 
    $o .= $csv;
    drupal_add_http_header('Content-Type', 'text/csv; utf-8');
    drupal_add_http_header('Content-Disposition', 'attachment; filename = dataexport.csv');
    print($o);
    
  }
}