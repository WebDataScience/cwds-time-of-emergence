<?php

// Error reporting code
error_reporting(E_ALL);
ini_set('display_errors', TRUE);
ini_set('display_startup_errors', TRUE);

global $maindatatable;
$maindatatable = "variablev5";
global $lookupdatatable;
$lookupdatatable = "lookupv2";
global $toleranceoptions;
$toleranceoptions = array(  1 => 'Low (to extreme 10% of 1950-1999 conditions))',  2 => 'High (to extreme 40% of 1950-1999 conditions)',);

function toewhiskers_menu() {
  $items['explore'] = array(
    'page callback' => 'toewhiskers_explore_page_function',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  $items['compare'] = array(
    //'page callback' => 'toewhiskers_renderwebformelement_function',
    'page callback' => 'toewhiskers_compare_page_function',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  $items['map'] = array(
    'page callback' => 'toewhiskers_map_page_function',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  $items['mapbytype'] = array(
    'page callback' => 'toewhiskers_mapbytype_page_function',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  $items['mapdetails'] = array(
    'page callback' => 'toewhiskers_mapdetails_page_function',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  $items['displaymap'] = array(
    'page callback' => 'toewhiskers_displaymap_page_function',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  $items['timeline'] = array(
    'page callback' => 'toewhiskers_page_function',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  $items['timelinedata'] = array(
    'page callback' => 'toewhiskers_json_query_function',
    'page arguments' => array(1, 'mode'),
    'access callback' => TRUE,
  );
  $items['boxplotdata'] = array(
    'page callback' => 'toewhiskers_json_query_boxplot_function',
    'page arguments' => array(1,2),
    'access callback' => TRUE,
  );
  $items['map/variablelist'] = array(
    'page callback' => 'toewhiskers_variablelist_function',
    'page arguments' => array(2,3,4),
    'access callback' => TRUE,
  );
  $items['cigtoeconfig'] = array(
    'page callback' => 'toewhiskers_cigtoeconfig_function',
    'page arguments' => array(),
    'access callback' => TRUE,
  );
  return $items;
}


function toewhiskers_theme(){
    return array(
      'explore_template' => array(
         // file name will be page-explore.tpl.php
         'template' => 'page-explore',
      ),
      'compare_template' => array(
        'template' => 'page-toewhiskers',
      ),
      'map_template' => array(
        'template' => 'page-toewhiskers',
      ),
      'mapbytype_template' => array(
        'template' => 'page-toewhiskers',
      ),
      'mapdetails_template' => array(
        'template' => 'page-toewhiskers',
      ),
      'displaymap_template' => array(
        'template' => 'page-toewhiskers',
      ),
      'timeline_template' => array(
        // file name will be page-timeline.tpl.php
        'template' => 'page-timeline',
      ),
    );
}


function toewhiskers_explore_page_function(){  
  $_SESSION['compare'] = NULL;
  drupal_add_js(drupal_get_path('module', 'toewhiskers') . '/js/map.js');
  drupal_set_title('Explore');  
  return theme('explore_template');  
}
function toewhiskers_compare_page_function(){ 
  drupal_add_js(drupal_get_path('module', 'toewhiskers') . '/js/compareform.js');
  drupal_set_title('Select Input Parameters'); 
  return theme('compare_template');  
}
function toewhiskers_map_page_function(){ 
  drupal_add_js(drupal_get_path('module', 'toewhiskers') . '/js/mapform.js');
  drupal_set_title('Choose variable to map'); 
  return theme('map_template');  
}
function toewhiskers_mapbytype_page_function(){ 
  drupal_add_js(drupal_get_path('module', 'toewhiskers') . '/js/mapform.js');
  drupal_set_title('Select Dataset'); 
  return theme('mapbytype_template');  
}
function toewhiskers_mapdetails_page_function(){ 
  drupal_add_js(drupal_get_path('module', 'toewhiskers') . '/js/mapform.js');
  drupal_set_title('Refine Map Query'); 
  return theme('mapdetails_template');  
}
function toewhiskers_displaymap_page_function(){ 
  drupal_add_js(drupal_get_path('module', 'toewhiskers') . '/js/mapform.js');
  drupal_set_title('One Hydro-climatic Variable by Region'); 
  return theme('displaymap_template');  
}


function template_preprocess_explore_template(&$variables) {
  $form = drupal_get_form('toewhiskers_explore_form');
  $o = drupal_render($form);
  $variables['explore_form'] = $o;
}
function template_preprocess_compare_template(&$variables) {
  $form = drupal_get_form('toewhiskers_compare_form');
  $o = drupal_render($form);
  $variables['explore_form'] = $o;
}
function template_preprocess_map_template(&$variables) {
  $form = drupal_get_form('toewhiskers_map_form');
  $o = drupal_render($form);
  $variables['explore_form'] = $o;
}
function template_preprocess_mapbytype_template(&$variables) {
  $form = drupal_get_form('toewhiskers_mapbytype_form');
  $o = drupal_render($form);
  $variables['explore_form'] = $o;
}
function template_preprocess_mapdetails_template(&$variables) {
  $form = drupal_get_form('toewhiskers_mapdetails_form');
  $o = drupal_render($form);
  $variables['explore_form'] = $o;
}
function template_preprocess_displaymap_template(&$variables) {
  $maparray = isset($_SESSION['map'])?$_SESSION['map']:array();
  $pathtomap = drupal_get_path('module', 'toewhiskers');
  $o = "<img src='" . $pathtomap . "/images/Samples/" . $maparray['stage1filename'] . "'>";
  $o .= "<p>Stage 2 filename is: " . $maparray['stage2filename'] . "</p>";
  $variables['explore_form'] = $o;
}
function toewhiskers_explore_form($form, &$form_submit) {
  // Session variable used to prepopulate if available.
  $previousvaluesearray = isset($_SESSION['compare'])?$_SESSION['compare']:array();
  $options = array(
    0 => 'A specific locale',
    1 => 'A specific environmental variable',
    2 => 'Examine hotspots',
  );
  $form['compare'] = array(
    '#type' => 'radios',
    '#title' => t('I want to focus on...'),
    '#options' => $options,
    '#required' => TRUE,
  );
  $options = array(1 => 'County',2 => 'Watershed (8-digit HUC)',3 => 'Streamflow locations');
  $form['geodomain'] = array(
    '#type' => 'radios',
    '#title' => t('Choose location of interest'),
    '#options' => $options,
    '#default_value' => '1',
    /*'#disabled' => TRUE,*/
  );
  $options = array(
  '2.1.01' => 'WA - Adams',
'2.1.02' => 'WA - Asotin',
'2.1.03' => 'WA - Benton',
'2.1.04' => 'WA - Chelan',
'2.1.05' => 'WA - Clallam',
'2.1.06' => 'WA - Clark',
'2.1.07' => 'WA - Columbia',
'2.1.08' => 'WA - Cowlitz',
'2.1.09' => 'WA - Douglas',
'2.1.10' => 'WA - Ferry',
'2.1.11' => 'WA - Franklin',
'2.1.12' => 'WA - Garfield',
'2.1.13' => 'WA - Grant',
'2.1.14' => 'WA - Grays Harbor',
'2.1.15' => 'WA - Island',
'2.1.16' => 'WA - Jefferson',
'2.1.17' => 'WA - King',
'2.1.18' => 'WA - Kitsap',
'2.1.19' => 'WA - Kittitas',
'2.1.20' => 'WA - Klickitat',
'2.1.21' => 'WA - Lewis',
'2.1.22' => 'WA - Lincoln',
'2.1.23' => 'WA - Mason',
'2.1.24' => 'WA - Okanogan',
'2.1.25' => 'WA - Pacific',
'2.1.26' => 'WA - Pend Oreille',
'2.1.27' => 'WA - Pierce',
'2.1.28' => 'WA - San Juan',
'2.1.29' => 'WA - Skagit',
'2.1.30' => 'WA - Skamania',
'2.1.31' => 'WA - Snohomish',
'2.1.32' => 'WA - Spokane',
'2.1.33' => 'WA - Stevens',
'2.1.34' => 'WA - Thurston',
'2.1.35' => 'WA - Wahkiakum',
'2.1.36' => 'WA - Walla Walla',
'2.1.37' => 'WA - Whatcom',
'2.1.38' => 'WA - Whitman',
'2.1.39' => 'WA - Yakima',
'2.2.01' => 'ID - Ada',
'2.2.02' => 'ID - Adams',
'2.2.03' => 'ID - Bannock',
'2.2.04' => 'ID - Bear Lake',
'2.2.05' => 'ID - Benewah',
'2.2.06' => 'ID - Bingham',
'2.2.07' => 'ID - Blaine',
'2.2.08' => 'ID - Boise',
'2.2.09' => 'ID - Bonner',
'2.2.10' => 'ID - Bonneville',
'2.2.11' => 'ID - Boundary',
'2.2.12' => 'ID - Butte',
'2.2.13' => 'ID - Camas',
'2.2.14' => 'ID - Canyon',
'2.2.15' => 'ID - Caribou',
'2.2.16' => 'ID - Cassia',
'2.2.17' => 'ID - Clark',
'2.2.18' => 'ID - Clearwater',
'2.2.19' => 'ID - Custer',
'2.2.20' => 'ID - Elmore',
'2.2.21' => 'ID - Franklin',
'2.2.22' => 'ID - Fremont',
'2.2.23' => 'ID - Gem',
'2.2.24' => 'ID - Gooding',
'2.2.25' => 'ID - Idaho',
'2.2.26' => 'ID - Jefferson',
'2.2.27' => 'ID - Jerome',
'2.2.28' => 'ID - Kootenai',
'2.2.29' => 'ID - Latah',
'2.2.30' => 'ID - Lemhi',
'2.2.31' => 'ID - Lewis',
'2.2.32' => 'ID - Lincoln',
'2.2.33' => 'ID - Madison',
'2.2.34' => 'ID - Minidoka',
'2.2.35' => 'ID - Nez Perce',
'2.2.36' => 'ID - Oneida',
'2.2.37' => 'ID - Owyhee',
'2.2.38' => 'ID - Payette',
'2.2.39' => 'ID - Power',
'2.2.40' => 'ID - Shoshone',
'2.2.41' => 'ID - Teton',
'2.2.42' => 'ID - Twin Falls',
'2.2.43' => 'ID - Valley',
'2.2.44' => 'ID - Washington',
'2.3.01' => 'OR - Baker',
'2.3.02' => 'OR - Benton',
'2.3.03' => 'OR - Clackamas',
'2.3.04' => 'OR - Clatsop',
'2.3.05' => 'OR - Columbia',
'2.3.06' => 'OR - Coos',
'2.3.07' => 'OR - Crook',
'2.3.08' => 'OR - Curry',
'2.3.09' => 'OR - Deschutes',
'2.3.10' => 'OR - Douglas',
'2.3.11' => 'OR - Gilliam',
'2.3.12' => 'OR - Grant',
'2.3.13' => 'OR - Harney',
'2.3.14' => 'OR - Hood River',
'2.3.15' => 'OR - Jackson',
'2.3.16' => 'OR - Jefferson',
'2.3.17' => 'OR - Josephine',
'2.3.18' => 'OR - Klamath',
'2.3.19' => 'OR - Lake',
'2.3.20' => 'OR - Lane',
'2.3.21' => 'OR - Lincoln',
'2.3.22' => 'OR - Linn',
'2.3.23' => 'OR - Malheur',
'2.3.24' => 'OR - Marion',
'2.3.25' => 'OR - Morrow',
'2.3.26' => 'OR - Multnomah',
'2.3.27' => 'OR - Polk',
'2.3.28' => 'OR - Sherman',
'2.3.29' => 'OR - Tillamook',
'2.3.30' => 'OR - Umatilla',
'2.3.31' => 'OR - Union',
'2.3.32' => 'OR - Wallowa',
'2.3.33' => 'OR - Wasco',
'2.3.34' => 'OR - Washington',
'2.3.35' => 'OR - Wheeler',
'2.3.36' => 'OR - Yamhill',
);
  $form['region'] = array(
    '#type' => 'select',
    '#title' => t('Region'),
    '#options' => $options,
    '#multiple' => FALSE,
    '#required' => TRUE,
    '#default_value' => '2.1.17',
  );
  
  $form['submit'] = array(
    '#title' => t('Next'),
    '#value' => 'Next',
    '#type' => 'submit',
  );
    
  $form_submit['redirect'] = 'compare';
    
  return $form;
}


/**
 * Submit handler for the '/explore' form.
 */
function toewhiskers_explore_form_submit($form, &$form_state) {
  // Grab session values if present.
  $comparearray = isset($_SESSION['compare'])?$_SESSION['compare']:array();
 
  $comparearray['geodomain'] = check_plain($form_state['values']['geodomain']); 
  $comparearray['compare'] = check_plain($form_state['values']['compare']);
  $comparearray['region'] = check_plain($form_state['values']['region']);
  $_SESSION['compare'] = $comparearray;
  
  $form_state['redirect'] = 'compare';
  if($comparearray['compare'] == 1) { $form_state['redirect'] = 'map';  }
}


function toewhiskers_page_function(){
    drupal_add_js('https://www.google.com/jsapi');
    drupal_add_js("https://www.google.com/jsapi?autoload={'modules':[{'name':'visualization','version':'1','packages':['timeline']}]}");
    drupal_add_js(drupal_get_path('module', 'toewhiskers') . '/js/chart.js');
    drupal_add_css(drupal_get_path('module', 'toewhiskers') . '/css/toewhiskers.css');
    // Set the value of the 'I want' to be 'compare' so that subsequent form submissions redirect to this page.
    $_SESSION['compare']['compare'] = 0;
    return theme('timeline_template');
}


function template_preprocess_timeline_template(&$variables) {
  $variables['parameterform'] = toewhiskers_renderwebformelement_function();
}

function toewhiskers_renderwebformelement_function(){  
  //This works to build initial forms that have no selections made yet.
  $form = drupal_get_form('toewhiskers_compare_form');
  $o = drupal_render($form);
  return $o;
}


function toewhiskers_compare_form($form,&$form_submit) {
  // Session variable used to prepopulate if available.
  $comparearray = isset($_SESSION['compare'])?$_SESSION['compare']:array();
  //drupal_set_message('comparearray:<pre>'. print_r($comparearray, TRUE) .'</pre>');
  $form['narrow'] = array(
    '#type' => 'fieldset',
    '#title' => t('Narrow list of available Hydroclimatic Variables by following:'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  if($comparearray['geodomain'] == 1 || $comparearray['geodomain'] == 2 ){
    toewhiskers_narrow_subform_theme($form);
  } else {
    $form['narrow']['theme'] = array('#type' => 'hidden', '#value' => 4);
  }
  toewhiskers_narrow_subform($form);
  $form['variable'] = array(
    '#type' => 'select',
    '#title' => t('Hydroclimatic Variables'),
    '#options' => variablesarray(),    
    '#description' => t('To select multiple options, hold down “ctrl” or “command” key'),
    '#multiple' => TRUE,
    '#required' => TRUE,
    '#default_value' => isset($comparearray['variable'])?$comparearray['variable']:'',
    '#cols' => 120,
    '#size' => 10,
  );
  $form['parameter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Apply the following parameters to the query:'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $options = array( 'high' => 'High (RCP8.5/A1B)', 'low' => 'Low (RCP4.5/B1)',  );
  $form['parameter']['emission'] = array(
    '#type' => 'radios',
    '#title' => t('Emission Scenario'),
    '#options' => $options,
    '#required' => TRUE,
    '#default_value' => isset($comparearray['emission'])?$comparearray['emission']:key($options),
  );
  /*
  $options = array( 'BCSD5' => 'Statistically-downscaled (CMIP5 BCSD)',  );
  $form['parameter']['dataset'] = array(
    '#type' => 'radios',
    '#title' => t('Climate Data'),
    '#options' => $options,
    '#required' => TRUE,
    '#default_value' => isset($comparearray['dataset'])?$comparearray['dataset']:key($options),
  );
  */
  if($comparearray['geodomain'] == 3 ){
    $form['parameter']['dataset'] = array('#type' => 'hidden', '#value' => 'BCSD5');
  }
  
  
  $options = array(
    '95' => 'Low (to extreme 10% of 1950-1999 conditions))',
    '80' => 'High (to extreme 40% of 1950-1999 conditions)',
  );
  $form['parameter']['tolerance'] = array(
    '#type' => 'radios',
    '#title' => t('Past Sensitivity*'),
    '#options' => $options,
    '#required' => TRUE,
    '#default_value' => isset($comparearray['tolerance'])?$comparearray['tolerance']:key($options),
  );
  $options = array('95' => 'Fast', '50' => 'Central', '5' => 'Slow',);
  $form['parameter']['confidence'] = array(
    '#type' => 'radios',
    '#title' => t('Estimated Rate of Climate Change*'),
    '#options' => $options,
    '#required' => TRUE,
    '#default_value' => 50,//isset($comparearray['confidence'])?$comparearray['confidence']:key($options),
  );
  $form['submit'] = array(
    '#title' => t('Calculate'),
    '#value' => 'Submit',
    '#type' => 'submit',
    );
  return $form;
}

/*
 * Helper function for forms that reuse the 'narrow variables' filters.
 */
function toewhiskers_narrow_subform(&$form){
  $options = array(10 => 'All',
                   0 => 'Drought',
                   1 => 'Energy',
                   2 => 'Fish',
                   3 => 'Flood',
                   4 => 'General',
                   5 => 'Human health',
                   6 => 'Infrastructure',
                   7 => 'Streamflow',
                   8 => 'Water availability',
                   9 => 'Water quality',);
  $form['narrow']['impact'] = array(
    '#type' => 'radios',
    '#title' => t('Related Impact'),
    '#options' => $options,
    '#default_value' => '9',
  ); 
  $averageextremeoptions = array(2 => 'All', 0 => 'Average', 1 => 'Extreme',);
  $form['narrow']['descriptor'] = array(
    '#type' => 'radios',
    '#title' => t('Descriptor'),
    '#options' => $averageextremeoptions,
    '#default_value' => '2',
  );
  $typeoptions = array(3 => 'All', 0 => 'Monthly', 1 => 'Seasonal', 2 => 'Annual');
  $form['narrow']['type'] = array(
    '#type' => 'radios',
    '#title' => t('Type'),
    '#options' => $typeoptions,
    '#default_value' => '3',
    '#suffix' => '<div class="clearfix"></div>',
  ); 
  $form['narrow']['filter'] = array(
    '#type' => 'button',
    '#value' => t('Filter'),
  );
}
/*
 * Helper function for forms that reuse the 'narrow variables' filters. Provides only the 'theme' options.
 */
function toewhiskers_narrow_subform_theme(&$form){
  $options = array(4 => 'All',0 => 'Air Temperature', 1 => 'Precipitation', 2 => 'Hydrological', 3 => 'Stream', );
  // Not all themes are represented in list of variables at this time.
  //$options = array(4 => 'All',0 => 'Air Temperature', 1 => 'Precipitation',  );
  $form['narrow']['theme'] = array(
    '#type' => 'radios',
    '#title' => t('Theme'),
    '#options' => $options,
    '#default_value' => '4',
  );
}
  
  
/**
 * Submit handler for the 'compare' form.
 */
function toewhiskers_compare_form_submit($form, &$form_state) {
  //drupal_set_message('formstate:<pre>'. print_r($form_state, TRUE) .'</pre>');
  // Grab session values if present.
  $comparearray = isset($_SESSION['compare'])?$_SESSION['compare']:array();
  $comparearray['theme'] = check_plain($form_state['values']['theme']);
  $comparearray['impact'] = check_plain($form_state['values']['impact']);
  $comparearray['descriptor'] = check_plain($form_state['values']['descriptor']);
  $comparearray['type'] = check_plain($form_state['values']['type']);
  $comparearray['variable'] = toewhiskers_clean_array($form_state['values']['variable']);
  $comparearray['emission'] = check_plain($form_state['values']['emission']);
  //$comparearray['emission'] = toewhiskers_clean_array($form_state['values']['emission']);
  //$comparearray['dataset'] = check_plain($form_state['values']['dataset']);
  $comparearray['tolerance'] = check_plain($form_state['values']['tolerance']);
  $comparearray['confidence'] = check_plain($form_state['values']['confidence']);
  // Set session variable.
  $_SESSION['compare'] = $comparearray;
  $compare = $_SESSION['compare'];

  // If initial compare option was 'View the priority areas for climate change response action' send user to /density-maps instead of /timeline
  if ($compare['compare'] == 2) {
    $form_state['redirect'] = 'density-maps';
  } else {
    $form_state['redirect'] = 'timeline';
  }

}


function toewhiskers_map_form($form,&$form_submit) {
  // Session variable unset at beginning of map form.
  unset($_SESSION['map']);
  $form['narrow'] = array(
    '#type' => 'fieldset',
    '#title' => t('Choose one variable. You may narrow list of available Hydroclimatic Variables by following:'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  toewhiskers_narrow_subform_theme($form);
  toewhiskers_narrow_subform($form);
  $form['variable'] = array(
    '#type' => 'select',
    '#title' => t('Hydroclimatic Variables'),
    '#options' => variablesarray(),
    '#description' => t('Select one hydroclimatic variable.'),
    '#required' => TRUE,
    '#default_value' => '1',
    '#cols' => 120,
    '#size' => 10,
  );
  $form['parameter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Apply the following parameters to the query:'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $maptypeoptions = array(
    '1' => 'Emergence Year',
    '2' => 'Emergence Location',
  );
  $form['parameter']['maptype'] = array(
    '#type' => 'radios',
    '#title' => t('Map Type'),
    '#options' => $maptypeoptions,
    '#required' => TRUE,
    '#default_value' => key($maptypeoptions),
  );
  $options = array(1 => '80', 2 => '95', );
  $form['parameter']['emergencethreshold'] = array(
    '#type' => 'radios',
    '#title' => t('Emergence Threshold'),
    '#options' => $options,
    '#default_value' => '1',
  );  
  $form['submit'] = array(
    '#title' => t('Calculate'),
    '#value' => 'Next',
    '#type' => 'submit',
    );
  return $form;
}

/**
 * Validate handler for the 'map' form
 */
function toewhiskers_map_form_validate($form, &$form_state) {
  $variableid = check_plain($form_state['values']['variable']);
  //drupal_set_message('variableid:<pre>'. print_r($variableid, TRUE) .'</pre>');
  $allvariablearray = array();
  $allvariablearray = variablesarray();
  //drupal_set_message('maparray:<pre>'. print_r($allvariablearray, TRUE) .'</pre>');
  if( ! (array_key_exists( $variableid, $allvariablearray )) ){
    form_set_error('variable', 'Invalid variable choice.');
  }
}

/**
 * Submit handler for the 'map' form.
 */
function toewhiskers_map_form_submit($form, &$form_state) {
  // drupal_set_message('formstate:<pre>'. print_r($form_state, TRUE) .'</pre>');
  // Grab session values if present.
  $maparray = isset($_SESSION['map'])?$_SESSION['map']:array();
  $maparray['theme'] = check_plain($form_state['values']['theme']);
  $maparray['impact'] = check_plain($form_state['values']['impact']);
  //$comparearray['variable'] = toewhiskers_clean_array($form_state['values']['variable']);
  $maparray['variable'] = check_plain($form_state['values']['variable']);
  $maparray['maptype'] = check_plain($form_state['values']['maptype']);
  $maparray['emergencethreshold'] = check_plain($form_state['values']['emergencethreshold']);
  
  // Set session variable.
  $_SESSION['map'] = $maparray;
  
  /* Stage one map file observations. Supported by actual image filenames. */
  
  // m = map type
  // b = boundary types (1 = state, 2 = state and county, 3 = state, 4 = state and reservation)
  // xx.xx = variable
  // t = tolerance
  // s = scenario set (rcp45,a1b:1, rcp85,b1: 2)
  // c = confidence, always 2 for maps
  // d = dataset
  // p = ??
  // rcp85 = high
  // rcp45 = low
  // aib = high
  // b1 = low
  // s1 = 45, a1b
  // s2 = 85, b1
  // p only applies to 'm2' maps. Values are 1,2,3.
  
  /*
The following data to map linkages provided in a Trello based document by Rita.
From CIG:  
  
Dimensions	Options	1	2	3	4
Map	M[1,2]	Emergence Year	Emergence Location		
Extent	E[1,2]	WA/OR/ID/BC	Puget Sound		
Boundaries overlaid	B[1,2,3,4]	State	County	Watershed	Tribal Land
Variable	V				
EmergThres	T[1,2]	80	95		
EmisScenario	S[1,2]	rcp45 or B1	rcp85 or A1B		
SignalConfidence	C[1,2,3]	5	50	95	
Period	P[1,2,3]	2025	2050	2075	2100
Dataset	D[1,2,3]	BCSD5	BCSD3	WRF3	
					
Naming convention:	M_E_B_V_T_S_C_P_D.png				
For example: 	2_2_3_8_1_1_2_3_1.png => 				
	Emergence location (by watershed) for Puget Sound area for variable 8 with the lower (middle 60%) threshold, the RCP4.5 scenario, 50% confidence level for the period 2075, based on BCSD5 dataset.				
  */ 
  
  $form_state['redirect'] = 'mapbytype';
  
}


function toewhiskers_mapbytype_form($form,&$form_submit) {
  $maptype = "";
  $theme = "";
 
  $maparray = isset($_SESSION['map'])?$_SESSION['map']:array();
  $maptype = $maparray['maptype'];
  //drupal_set_message('maparray:<pre>'. print_r($maparray, TRUE) .'</pre>');
  
  $variableid = $maparray['variable'];
  
  global $secondarydatatable;
  $query = "SELECT * FROM " . $secondarydatatable . " WHERE variableid = '" . $variableid . "'";
  //drupal_set_message($query);
  
  // Setup to query non Drupal database. Then query for 'theme' value for this one variableid.
  db_set_active('cig_toe');
  $row = (object)db_query($query)->fetchAssoc();
  $theme = $row->THEME;
  //drupal_set_message('row:<pre>'. print_r($row, TRUE) .'</pre>');
  db_set_active();
  
  $form['parameter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Apply the following parameters to the query:'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  if ($maptype == '2'){
    $options = array(1 => 'Low (RCP45 or B1)', 2 => 'High (RCP85 or A1B)', );
    $form['parameter']['emissionscenario'] = array(
      '#type' => 'radios',
      '#title' => t('Emission Scenario'),
      '#options' => $options,
      '#default_value' => '1',
    );
  }
  $datasetoptions = array(2 => 'BCSD3',);
  if ($theme == "Air Temperature" || $theme == "Precipitation"){
    $datasetoptions = array(1 => 'BCSD5', 3 => 'WRF3',  );
  }
  if ($theme == "Streamflow"){
    $datasetoptions = array(1 => 'BCSD5', 2 => 'BCSD3',  );
  }
  $form['parameter']['dataset'] = array(
    '#type' => 'radios',
    '#title' => t('Dataset'),
    '#options' => $datasetoptions,
    '#default_value' => '1',
  );
	$form['submit'] = array(
    '#title' => t('Calculate'),
    '#value' => 'Next',
    '#type' => 'submit',
  );
  return $form;
}

/**
 * Submit handler for the 'mapbytype' form.
 */
function toewhiskers_mapbytype_form_submit($form, &$form_state) {
  $maparray = isset($_SESSION['map'])?$_SESSION['map']:array();
  //drupal_set_message('formstate:<pre>'. print_r($form_state, TRUE) .'</pre>');
  $maparray['dataset'] = check_plain($form_state['values']['dataset']);
  if($maparray['dataset'] == '1'){$maparray['scenario'] = 2;}
  if($maparray['dataset'] == '2' || $maparray['dataset'] == '3'){$maparray['scenario'] = 1;}
  //drupal_set_message('maparray:<pre>'. print_r($maparray, TRUE) .'</pre>');
  
  $_SESSION['map'] = $maparray;
  $form_state['redirect'] = 'mapdetails';
}


function toewhiskers_mapdetails_form($form,&$form_submit) {
  $maparray = isset($_SESSION['map'])?$_SESSION['map']:array();
  //drupal_set_message('maparray:<pre>'. print_r($maparray, TRUE) .'</pre>');
  $form['parameter'] = array(
    '#type' => 'fieldset',
    '#title' => t('Apply the following parameters to the query:'),
    '#collapsible' => FALSE,
    '#collapsed' => FALSE,
  );
  $extentoptions = array(1 => 'WA/OR/ID/BC', 2 => 'Puget Sound', );
  $form['parameter']['extent'] = array(
    '#type' => 'radios',
    '#title' => t('Extent'),
    '#options' => $extentoptions,
    '#default_value' => '1',
  );
  $options = array(1 => 'State', 2 => 'County', 3 => 'Watershed', 4 => 'Tribal Land', );
  $form['parameter']['boundary'] = array(
    '#type' => 'radios',
    '#title' => t('Boundary'),
    '#options' => $options,
    '#default_value' => '1',
  );
  $options = array(1 => '5', 2 => '50', 3 => '90', );
  $form['parameter']['signalconfidence'] = array(
    '#type' => 'radios',
    '#title' => t('Signal Confidence'),
    '#options' => $options,
    '#default_value' => '1',
    '#description' => 'This datapoint not applicable to stage 1 mapset.',
  ); 
  if(array_key_exists('maptype', $maparray) && $maparray['maptype'] == 2 ){
    $stage1options = array(1 => '2025', 2 => '2050', 3 => '2075');
    $stage2options = array(1 => '2025', 2 => '2050', 3 => '2075', 4 => '2100', );
    $form['parameter']['period'] = array(
      '#type' => 'radios',
      '#title' => t('Period'),
      '#options' => $stage1options,
      '#default_value' => '1',
    );
  }
	$form['submit'] = array(
    '#title' => t('Calculate'),
    '#value' => 'Query for map',
    '#type' => 'submit',
  );
  return $form;
}

/**
 * Submit handler for the 'mapdetails' form.
 */
function toewhiskers_mapdetails_form_submit($form, &$form_state) {
  $maparray = isset($_SESSION['map'])?$_SESSION['map']:array();
  
  if($maparray['dataset'] == '1'){$maparray['scenario'] = 2;}
  if($maparray['dataset'] == '2' || $maparray['dataset'] == '3'){$maparray['scenario'] = 1;}
  $maparray['boundary'] = check_plain($form_state['values']['boundary']);
  $maparray['extent'] = check_plain($form_state['values']['extent']);
  $maparray['signalconfidence'] = check_plain($form_state['values']['signalconfidence']);
  $maparray['period'] = (array_key_exists('period', $form_state['values']))?check_plain($form_state['values']['period']):'';
  
  // This is filename format in document. 
  $filenametemplate = "M_E_B_V_T_S_C_P_D.png";
  $maparray['stage2filename'] = $maparray['maptype'] . "_"   . $maparray['extent'] . "_" . $maparray['boundary'] . "_"   . $maparray['variable'] . "_"   . $maparray['emergencethreshold'] . "_"   . $maparray['scenario'] . "_"   . $maparray['signalconfidence'] . "_"   . $maparray['period'] . "_"   . $maparray['dataset'] . ".png";
  
  // This is filename format represented by actual files.
  $filenametemplate = "mx_bx_v_tx_sx_c2_dx[_px].png";
  $maparray['stage1filename'] = "m" . $maparray['maptype'] . "_b" . $maparray['boundary'] . "_" . ltrim($maparray['variable'], 'V') . "_t"   . $maparray['emergencethreshold'] . "_s"   . $maparray['scenario'] . "_c2_d"   . $maparray['dataset'];
  if(array_key_exists('maptype', $maparray) && $maparray['maptype'] == 2 ){$maparray['stage1filename']  .= "_p"   . $maparray['period'];}
  $maparray['stage1filename'] .= ".png";
  
  //drupal_set_message('maparray:<pre>'. print_r($maparray, TRUE) .'</pre>');
  $_SESSION['map'] = $maparray;
  $form_state['redirect'] = 'displaymap';
}


function toewhiskers_clean_array($array, $filter = 'check_plain') {
  $clean = array();
  foreach ($array as $key => $val) {
    if (is_array($val)) {
      $clean[$filter($key)] = clean_array($val, $filter);
    }
    else {
      $clean[$filter($key)] = $filter($val);
    }
  }
  return $clean;
}


/*
 * Ajax/JSON data retriever.
 */
function toewhiskers_json_query_function($mode){

  //drupal_set_message('formstate:<pre>'. print_r($_SESSION['compare'], TRUE) .'</pre>');
  global $maindatatable;
  global $lookupdatatable;
  
  $max_TOE_year = 2100;

  $verbose_test_mode = TRUE;
  
  $compare = $_SESSION['compare'];
  
  //$region = trim($compare['region']);
  
  // Multiple variables allowed.
  $variables = implode("','",$compare['variable']);
  $variables = str_replace(" ", "", $variables);
  
  // Radios
  $emission = trim($compare['emission']);
  
  // Checkboxes
  //$emissions = implode("','",$compare['emission']);
  //$emissions = str_replace(" ", "", $emissions);
  
  $dataset = trim($compare['dataset']);
  $tolerance = trim($compare['tolerance']);
  $confidence = trim($compare['confidence']);
  $region = trim($compare['region']);
 
  $timelinedata = array();
  
  //Query for the timeline chart portion of /timeline page.
  $query = "SELECT 
  {". $maindatatable."}.TOE,{". $maindatatable."}.VARIABLEID,{". $maindatatable."}.CHANGEDIR,{" . $lookupdatatable . "}.VARIABLENAME,{" . $lookupdatatable . "}.VARIABLESHORTNAME,{". $maindatatable."}.EMISSCENARIO,{" . $maindatatable . "}.DATASET 
  FROM {". $maindatatable."} LEFT JOIN {" . $lookupdatatable . "} on (" . $lookupdatatable . ".VARIABLEID = ". $maindatatable.".VARIABLEID) WHERE 
  ". $maindatatable.".VARIABLEID in ('" . $variables . "') 
  AND ". $maindatatable.".REGION = '" . $region .   "' 
  AND ". $maindatatable.".EMERGTHRES = " . $tolerance . "
  AND ". $maindatatable.".SIGNALCONFIDENCE = " . $confidence . "
  AND ". $maindatatable.".TOE <= " . $max_TOE_year . "
  AND ". $maindatatable.".MODELAGREEMENT = 'XX' 
  AND ". $maindatatable.".GCM = 'GCM_ensemble' ";
  if($compare['emission'] == "high"){
    $query .= "AND (". $maindatatable.".EMISSCENARIO = 'rcp85' OR " . $maindatatable.".EMISSCENARIO = 'a1b') ";
  }
  if($compare['emission'] == "low"){
    $query .= "AND (". $maindatatable.".EMISSCENARIO = 'rcp45' OR " . $maindatatable.".EMISSCENARIO = 'b1') ";
  }
  $query .= " LIMIT 20";
  
  $timelinequery = $query;
  $timelinequery = str_replace("{", "", $timelinequery);
  $timelinequery = str_replace("}", "", $timelinequery);

  //AND ". $maindatatable.".DATASET = '" . $dataset . "'  
    
  // Setup to query non Drupal database.
  db_set_active('cig_toe');
  
  $result = db_query($query);
  // Result is returned as a iterable object that returns a stdClass object on each iteration
  foreach ($result as $record) {
    
    // Function to translate ugly short name value in DB to pretty names:
    if($record->VARIABLESHORTNAME == "#Tmax>90degF(32.2deg"){$record->VARIABLESHORTNAME = "#Tmax>90°F(32.2°C)";}
    
    $timelinedata[] = array(
      $record->CHANGEDIR,
      intval($record->TOE),
      $record->VARIABLENAME,
      $record->VARIABLEID,
      ceil($record->TOE/5)*5,
      $record->VARIABLESHORTNAME,
      $record->EMISSCENARIO,
      $record->DATASET,
    );
    
  }  // End timeline data query.
  
  $csvvariables = array(
    'VARIABLESHORTNAME'=> 'Variable',
    'TOE'=> 'ToE_CentralTendency',
    'TOE_RANGE' => 'ToE_Range',
    'CHANGEDIR'=> 'Direction_of_Change',
  );
  $csv = implode(",", array_values($csvvariables)) . "\n";
  
  $toe_array =  array();
  $variable_object = new stdClass();
  
  // Query for 'table' portion of /timeline page.
  $query = "SELECT ". $maindatatable.".*," . $lookupdatatable . ".VARIABLESHORTNAME FROM {". $maindatatable."}  LEFT JOIN {" . $lookupdatatable . "} on (" . $lookupdatatable . ".VARIABLEID = ". $maindatatable.".VARIABLEID) WHERE
  ". $maindatatable.".VARIABLEID in ('" . $variables . "') 
  AND ". $maindatatable.".REGION = '" . $region .   "' 
  AND ". $maindatatable.".EMERGTHRES = " . $tolerance . "
  AND ". $maindatatable.".SIGNALCONFIDENCE = " . $confidence . "
  AND ". $maindatatable.".MODELAGREEMENT = 'XX'
  AND (". $maindatatable.".GCM = 'GCM_ensemble_25' OR ". $maindatatable.".GCM = 'GCM_ensemble' OR ". $maindatatable.".GCM = 'GCM_ensemble_75' ) ";
  if($compare['emission'] == "high"){
    $query .= "AND (". $maindatatable.".EMISSCENARIO = 'rcp85' OR " . $maindatatable.".EMISSCENARIO = 'a1b') ";
  }
  if($compare['emission'] == "low"){
    $query .= "AND (". $maindatatable.".EMISSCENARIO = 'rcp45' OR " . $maindatatable.".EMISSCENARIO = 'b1') ";
  }
  $query .= " ORDER BY ". $maindatatable.".VARIABLEID ";
  $result = db_query($query);
  
  //  AND ". $maindatatable.".DATASET = '" . $dataset . "' 
  
  // Result is returned as a iterable object that returns a stdClass object on each iteration
  foreach ($result as $record) {
    
    if(!isset($toe_array[$record->VARIABLEID])){
      $toe_array[$record->VARIABLEID] = new stdClass();
    }
    
    $toe_array[$record->VARIABLEID]->VARIABLESHORTNAME = $record->VARIABLESHORTNAME;
    
    $toe = "Beyond " . $max_TOE_year;
    if ($record->TOE <= $max_TOE_year){
      $toe = ceil($record->TOE/5)*5;
    }
    if($record->GCM == 'GCM_ensemble'){
      $toe_array[$record->VARIABLEID]->TOE = $toe;
    }
    if($record->GCM == 'GCM_ensemble_25'){
      $toe_array[$record->VARIABLEID]->YEARA = $toe;
    }
    if($record->GCM == 'GCM_ensemble_75'){
      $toe_array[$record->VARIABLEID]->YEARB = $toe;
    }
    
    $toe_array[$record->VARIABLEID]->CHANGEDIR = $record->CHANGEDIR;

  }  // End tabledata query.
  $tablequery = $query;
  $tablequery = str_replace("{", "", $tablequery);
  $tablequery = str_replace("}", "", $tablequery);
  
  db_set_active();
  
  
  $toedata = array(
    "maxtoeyear" => $max_TOE_year,
    "emission" => $emission,
    "confidence" => $confidence,
    "tolerance" => $tolerance,
    "dataset" => $dataset,
    "timelinedata" => $timelinedata,
    "tabledata" => $toe_array,
    "timelinequery" => $timelinequery,
    "tablequery" => $tablequery,
  );  
  
  
  if($mode == 'text'){
    // Create text for data export.
    $prettynames['emission'] = array(
      'rcp45'	=>	'RCP4.5',
      'rcp85'	=>	'RCP8.5',
      'A1B'	=>	'SRES A1B',
      'B1'	=>	'SRES B1',
    );
    $prettynames['confidence'] = array(
      '5'	=>	'Slow',
      '50'	=>	'Central',
      '95'	=>	'Fast',
    );
    $prettynames['tolerance'] = array(
      '95'	=>	'Low (to extreme 10% of 1950-1999 conditions))',
      '80'	=>	'High (to extreme 40% of 1950-1999 conditions)',
    );
    $prettynames['dataset'] = array(
      'BCSD5'	=>	'Statistically-downscaled (CMIP5 BCSD)',
    );
    
    $o = "Region: King County
Emission Scenario: " . $prettynames['emission'][$emission] . "
Estimated Rate of Climate Change: " . $prettynames['confidence'][$confidence] . "
Historical 'Noise' Range: " . $prettynames['tolerance'][$tolerance] . "
Climate Data: " . $prettynames['dataset'][$dataset] . "\n\n";
    
    foreach($toe_array as $toe_object){
      $csv .= '"' . $toe_object->VARIABLESHORTNAME . '",' . $toe_object->TOE . ',"' . $toe_object->YEARA . ' - ' . $toe_object->YEARB . '",';
      $csv .= ($toe_object->CHANGEDIR == 1)?'"Increasing"':'"Decreasing"';
      $csv .= "\n";
    }
    $o .= $csv;
        
    drupal_add_http_header('Content-Type', 'text/csv; utf-8');
    drupal_add_http_header('Content-Disposition', 'attachment; filename = dataexport.csv');
    print($o);
    
  } else {
    // Output JSON data for /timeline AJAX query.
    // Cleaner output for testing only:
    // drupal_json_output(print_r($toedata));
    drupal_json_output($toedata);  
  }
}


/*
 * Ajax/JSON data retriever.
 * This function returns data for the boxplot page.
 */
function toewhiskers_json_query_boxplot_function($variable,$mode){

  $verbose_test_mode = FALSE;
  
  global $maindatatable;
  global $lookupdatatable;
  
  $jasondata = array();
  $jasondata['variable'] = $variable;
  // Database contains only the King County region. This will need updating when additional regions are added to data in db.
  $jasondata['regionname'] = "King County";
  // Database contains only the BCSD5 dataset. This will need updating when additional datasets are added to data in db.
  $jasondata['dataname'] = "Statistically-downscaled (CMIP5 BCSD)";
  $emergencethreshold_array = array('95','80');
  $emissionscenario_array = array('rcp85','rcp45');
  $signalconfidence_array = array('95','50','5');
  
  // Setup to query non Drupal database.
  db_set_active('cig_toe');
  
  // Query for variable name.
  $query = "SELECT variablename FROM TOE_DATA_V1 where variableid='" . $variable . "' LIMIT 1";
  $row = (object)db_query($query)->fetchAssoc();
  $jasondata['variablename'] = $row->variablename;
  $boxplotdata = array();
  
  // Query for TOE values.
  foreach ($emergencethreshold_array as $key=>$emergencethreshold){
    foreach ($emissionscenario_array as $key=>$emissionscenario){
      foreach ($signalconfidence_array as $key=>$signalconfidence){
        $dots = array();
        $box = array();
        $query="select * from " . $maindatatable . " WHERE variableid='" . $variable . "' and  emisscenario='" . $emissionscenario . "' and modelagreement='XX' and emergthres=" . $emergencethreshold . " and signalconfidence=" . $signalconfidence;
        // ?? Which dataset??  'BCSD5' => 'BCSD5', 
        
        $result = db_query($query);
        // Result is returned as a iterable object that returns a stdClass object on each iteration
        foreach ($result as $record) {
          $pos = strpos($record->GCM, 'ensemble');
          if ($pos === false) {
            if($record->TOE <= 2100){
              $dots[$record->GCM] = $record->TOE;
            }
          } else {
            $box[$record->GCM] = $record->TOE;
          }
        }
        $oneboxplot = array(
          "box" => array($box['GCM_ensemble_25'],$box['GCM_ensemble'],$box['GCM_ensemble_75']),
          "dots" => $dots,
          "query" => $query,
        );  
        $boxplotdata['emergencethreshold' . $emergencethreshold]['emissionscenario' . $emissionscenario]['signalconfidence' . $signalconfidence] = $oneboxplot;
      }
    }
  }
  $jasondata = array_merge( $jasondata,$boxplotdata);
  
  db_set_active();

  if($verbose_test_mode){ 
    drupal_json_output(print_r($jasondata));
  }
  else{
    if($mode != 'text'){
      drupal_json_output($jasondata);
    } else {
      $o = "Variable: " . $jasondata['variable'] . "\n";
      $o .="Region: " . $jasondata['regionname'] . "\n";
      $o .="Dataset: " . $jasondata['dataname'] . "\n\n";
    
      $csv = "Tolerance,Emission Scenario,Confidence,GCM_Ensemble TOE(box),Model TOE(dots)\n";
      foreach($boxplotdata as $emergencekey=>$emergence){
        foreach($emergence as $emissionkey=>$emission){
          foreach($emission as $signalconfidencekey=>$signalconfidence){
            $boxdata = "";
            $dotsdata = "";
            foreach($signalconfidence as $boxordotskey=>$boxordots){
              if($boxordotskey == 'box'){
                $boxdata = implode(',',$boxordots);
              }
              if($boxordotskey == 'dots'){
                $dotsdata = implode(',',$boxordots);
              }
            }
            $csv .= $emergencekey . "," . $emissionkey . "," . $signalconfidencekey. ",\"" . $boxdata ."\",\"" . $dotsdata . "\"\n";
      } } } 
      $o .= $csv;
    
      drupal_add_http_header('Content-Type', 'text/csv; utf-8');
      drupal_add_http_header('Content-Disposition', 'attachment; filename = dataexport.csv');
      print($o);
    }
  }
}


/*
 *
 */
function variablesarray($themeindex = 4, $impactindex = 9, $typeindex = 2){
  global $maindatatable;
  global $lookupdatatable;
  $theme = NULL;
  if($themeindex == 0) {$theme = 'Air Temperature';}
  if($themeindex == 1) {$theme = 'Precipitation';}
  if($themeindex == 2) {$theme = 'Hydrological';}
  if($themeindex == 3) {$theme = 'Stream';}
  //$options = array(9 => 'All',0 => 'Drought', 1 => 'Energy', 2 => 'Fish', 3 => 'Flood',4 => 'General', 5 => 'Human health', 6 => 'Infrastructure', 7 => 'Streamflow',8 => 'Water quality',);
  $impact = NULL;
  if($impactindex == 0) {$impact = 'Drought';}
  if($impactindex == 1) {$impact = 'Energy';}
  if($impactindex == 2) {$impact = 'Fish';}
  if($impactindex == 3) {$impact = 'Flood';}  
  if($impactindex == 4) {$impact = 'General';}
  if($impactindex == 5) {$impact = 'Human health';}
  if($impactindex == 6) {$impact = 'Infrastructure';}
  if($impactindex == 7) {$impact = 'Streamflow';}   
  if($impactindex == 8) {$impact = 'Water quality';}
  $averageextreme = NULL;
  if($typeindex == 0) {$averageextreme = 'Average';}
  if($typeindex == 1) {$averageextreme = 'Extreme';}
  
  $variablesarray = array();
  
  $o = "";
  db_set_active('cig_toe');
  $query = "SELECT DISTINCT " .$maindatatable. ".VARIABLEID AS k, " . $lookupdatatable . ".VARIABLENAME AS v FROM " .$maindatatable. " LEFT JOIN " . $lookupdatatable . " ON (" . $lookupdatatable . ".VARIABLEID = " .$maindatatable. ".VARIABLEID) WHERE 1=1 ";
  if($theme){ $query .= " AND " . $lookupdatatable . ".THEME = '" . $theme . "'";}
  if($impact){ $query .= " AND " . $lookupdatatable . ".IMPACT LIKE '%" . $impact . "%'";} 
  if($averageextreme){ $query .= " AND " . $lookupdatatable . ".AVERAGEEXTREME = '" . $averageextreme . "'";}
  $queries = array($query);
  //drupal_set_message('function variablesarray() query:<pre>'. print_r($queries, TRUE) .'</pre>');
  foreach ($queries as $query) {
    $o .= "<br/>" . $query . "<br/>";   
    $result = db_query($query);
    // Result is returned as a iterable object that returns a stdClass object on each iteration
    foreach ($result as $record) {
      if(isset($record->v)){
        $variablesarray[$record->k] = t($record->v);
      }
    }
  }
  db_set_active();
  //print($o);
  return $variablesarray;
}


/*
 * Ajax/JSON data retriever.
 */
function toewhiskers_variablelist_function($themeindex,$impactindex,$typeindex){
  $variableoptions = variablesarray($themeindex,$impactindex,$typeindex);
  if(count($variableoptions) == 0){
    $variableoptions = array( 'No variables available for that set of parameters' );
  }
  drupal_json_output($variableoptions);
}


/*
 * Utility to grab distinct values from ToE database which will be used as options offered to user. This is accessed at /
 */
function toewhiskers_cigtoeconfig_function(){
  global $maindatatable;
  global $lookupdatatable;
  $o = "";
  db_set_active('cig_toe');
  
  $columns = array('REGION','EMISSCENARIO','DATASET','EMERGTHRES','SIGNALCONFIDENCE','MODELAGREEMENT','GCM');
$columns = array('GCM');
  foreach ($columns as $column) {
    $o .= "<br/>" . $column . "<br/>";
    $query = "SELECT DISTINCT " . $column . " FROM {" .$maindatatable. "}";    
    $result = db_query($query);
    // Result is returned as a iterable object that returns a stdClass object on each iteration
    foreach ($result as $record) {
      $o .= "'" . $record->$column . "' => '" . $record->$column . "',<br/>";
    }
  }
  
  $queries = array("SELECT DISTINCT " .$maindatatable. ".VARIABLEID AS k, " . $lookupdatatable . ".VARIABLENAME AS v, " . $lookupdatatable . ".THEME as t, " . $lookupdatatable . ".IMPACT as i FROM " .$maindatatable. " LEFT JOIN " . $lookupdatatable . " ON (" . $lookupdatatable . ".VARIABLEID = " .$maindatatable. ".VARIABLEID)");
//$queries = array();
  foreach ($queries as $query) {
    $o .= "<br/>" . $query . "<br/>";   
    $result = db_query($query);
    // Result is returned as a iterable object that returns a stdClass object on each iteration
    foreach ($result as $record) {
      $o .= "'" . $record->k . "' => t('" . $record->v . "'), 
      theme = " .$record->t . ", " .
      "impact = " .$record->i . 
      "<br/>";
    }
  }
  db_set_active();
  
/*  $o .= "<pre>  				
Dataset				Dataset
GCM - Phase 2				GCM
BCSD5				Statistically-downscaled (CMIP5 BCSD)
WRF - Phase 2				Dynamically-downscaled
				
EmergThres				Tolerance:          Text to appear on website (e.g. in timeline title)
95				  Low (to extreme 10% of 1950-1999 conditions))
80				 High (to extreme 40% of 1950-1999 conditions)
				
SignalConfidence				
Confidence:
5				Low (5% confidence interval)
50				Medium (50% confidence interval)
95				High (95% confidence interval)
v				
Lower bound (earlier ToE)
Central tendency
Upper bound (later ToE)
			 
ModelAgreement				Model agreement:
25				Low (25%)
50				Medium (50%)
75				High (75%)
				
EmisScenario				Emission Scenario:
rcp45				RCP4.5
rcp85				RCP8.5
A1B				SRES A1B
B1				SRES B1</pre>
";*/
  print($o);
  
}
